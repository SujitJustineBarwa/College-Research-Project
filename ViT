{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2bba59f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import os\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "from sklearn.utils import resample\n",
    "\n",
    "PATH = r\".\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2226a787",
   "metadata": {},
   "source": [
    "# File Loading"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eb6aa2a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "file_path = os.path.join(PATH,'Images')\n",
    "frames = os.listdir(file_path)\n",
    "func = lambda f : int(f.split('.')[0])\n",
    "frames = sorted(frames, key=func)\n",
    "frames = list(map(lambda x : os.path.join(file_path,x),frames))\n",
    "frames"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ca816588",
   "metadata": {},
   "outputs": [],
   "source": [
    "class LiveGraphPlot:\n",
    "    def __init__(self, graph_width=800, graph_height=400, num_points=100):\n",
    "        self.graph_width = graph_width\n",
    "        self.graph_height = graph_height\n",
    "        self.num_points = num_points\n",
    "        self.data = []\n",
    "        self.data2 = []\n",
    "\n",
    "    def plot_graph(self, value1,value2):\n",
    "        self.data.append(value1)\n",
    "        self.data = self.data[-self.num_points:]  # Keep only the latest data points\n",
    "\n",
    "        self.data2.append(value2)\n",
    "        self.data2 = self.data2[-self.num_points:]  # Keep only the latest data points\n",
    "        \n",
    "        plt.clf()  # Clear the figure\n",
    "        plt.plot(range(len(self.data)), self.data)\n",
    "        plt.plot(range(len(self.data2)), self.data2)\n",
    "        plt.xlabel('Time')\n",
    "        plt.ylabel('Value')\n",
    "        plt.title('Live Graph')\n",
    "        plt.grid(False)\n",
    "\n",
    "        # Convert the plot to an image\n",
    "        fig = plt.gcf()\n",
    "        fig.canvas.draw()\n",
    "        plot_img = np.array(fig.canvas.renderer.buffer_rgba())\n",
    "            \n",
    "        # Convert RGBA to RGB\n",
    "        plot_img = cv2.cvtColor(plot_img, cv2.COLOR_RGBA2RGB)\n",
    "\n",
    "        # Resize the plot image to fit the specified graph width and height\n",
    "        plot_img = cv2.resize(plot_img, (self.graph_width, self.graph_height))\n",
    "\n",
    "        return plot_img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f4424ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Open the file in write mode\n",
    "file_path = os.path.join(PATH,'turn_dir.csv')\n",
    "data = pd.read_csv(file_path)\n",
    "data.drop(data.columns[[0,1]],axis=1,inplace=True)\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b05aef03",
   "metadata": {},
   "outputs": [],
   "source": [
    "data['steer'].plot()\n",
    "plt.vlines(1450,-1,1,colors='g')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b288c8d0",
   "metadata": {},
   "source": [
    "# Dataloading"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5abcabf8",
   "metadata": {},
   "source": [
    "With Turning and Traffic:\n",
    "\n",
    "    Left : 1472\n",
    "    Right : 775\n",
    "    Straight : 721\n",
    "    \n",
    "With Turning and not Traffic:\n",
    "\n",
    "    Left : 178\n",
    "    Right : 372\n",
    "    Straight : 0\n",
    "    \n",
    "Without Turning and Traffic:\n",
    "\n",
    "    Length : 4693"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "182449cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_majority = np.array(data[(data[\"Turn_signal\"] == \"Straight\")].steer)\n",
    "plt.plot(df_majority)\n",
    "plt.show()\n",
    "print(df_majority.shape[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ffba0f50",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "import torchvision.transforms as transforms\n",
    "\n",
    "\n",
    "class CustomDataset(Dataset):\n",
    "    def __init__(self,mode = 'train',over_sampling = True):\n",
    "        #len_frames = len(frames)\n",
    "        #n = int(0.8*len_frames)\n",
    "        \n",
    "        self.img_dir_path = os.path.join(PATH,'Images')\n",
    "        if mode == 'train':\n",
    "            self.data = data.iloc[:8000]\n",
    "            \n",
    "            #Over-sampling\n",
    "            if over_sampling == True:\n",
    "                \n",
    "                Left_Signal_population = data[(data[\"Turn_signal\"] == \"Left\")]\n",
    "                Right_Signal_population = data[(data[\"Turn_signal\"] == \"Right\")]\n",
    "                Straight_Signal_population = data[(data[\"Turn_signal\"] == \"Straight\")]\n",
    "                \n",
    "                resample_length =  max(data[(data[\"Turn_signal\"] == \"Left\")].shape[0],\n",
    "                                       data[(data[\"Turn_signal\"] == \"Right\")].shape[0],\n",
    "                                       data[(data[\"Turn_signal\"] == \"Straight\")].shape[0])\n",
    "                \n",
    "                Left_Signal_population_oversampled = resample(Left_Signal_population, n_samples=resample_length, replace=True, random_state=42)\n",
    "                Right_Signal_population_oversampled = resample(Right_Signal_population, n_samples=resample_length, replace=True, random_state=42)\n",
    "                Straight_Signal_population_oversampled = resample(Straight_Signal_population, n_samples=resample_length, replace=True, random_state=42)\n",
    "\n",
    "                self.data = pd.concat([Left_Signal_population_oversampled, \n",
    "                                       Right_Signal_population_oversampled,\n",
    "                                       Straight_Signal_population_oversampled])\n",
    "                #print(self.data.shape)\n",
    "                #print(Left_Signal_population_oversampled.shape)\n",
    "                #print(Right_Signal_population_oversampled.shape)\n",
    "                #print(Straight_Signal_population_oversampled.shape)\n",
    "                \n",
    "        else:\n",
    "            self.data = data.iloc[8000:]\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.data)\n",
    "\n",
    "    def __getitem__(self, index):\n",
    "        # Implement your logic to retrieve and preprocess the data\n",
    "        sample = self.data.iloc[index]['pic_file_name']\n",
    "        sample = os.path.join(self.img_dir_path,sample)\n",
    "        img = cv2.imread(sample)\n",
    "        #print(img.shape)\n",
    "        #img = transform(img).numpy()\n",
    "        img = cv2.resize(img, (200,88))\n",
    "        img = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)\n",
    "        \n",
    "        velocity = self.data.iloc[index]['velocity']\n",
    "        \n",
    "        if self.data.iloc[index][\"Turn_signal\"] == \"Left\":\n",
    "            command = torch.tensor([1,0,0])\n",
    "        elif self.data.iloc[index][\"Turn_signal\"] == \"Right\":\n",
    "            command = torch.tensor([0,0,1])\n",
    "        elif self.data.iloc[index][\"Turn_signal\"] == \"Straight\":\n",
    "            command = torch.tensor([0,1,0]) \n",
    "        else:\n",
    "            command = torch.tensor([0,0,0])\n",
    "        \n",
    "        throttle = self.data.iloc[index]['throttle']\n",
    "        steer = self.data.iloc[index]['steer']\n",
    "        brake = self.data.iloc[index]['brake']\n",
    "        \n",
    "        # Return the sample as a tuple or dictionary\n",
    "        return (img,velocity,command),(steer,throttle,brake)\n",
    "\n",
    "# Create an instance of your custom dataset\n",
    "train_dataset = CustomDataset('train')\n",
    "val_dataset = CustomDataset('val')\n",
    "\n",
    "# Create a data loader\n",
    "batch_size = 16\n",
    "dataloader = {'train' : DataLoader(train_dataset, batch_size=batch_size, shuffle=True),\n",
    "              'val' : DataLoader(val_dataset, batch_size=batch_size, shuffle=True)}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6ed48ed8",
   "metadata": {},
   "outputs": [],
   "source": [
    "for index,i in enumerate(dataloader['train']):\n",
    "    print(i[0][0].shape,i[1][0].shape)\n",
    "    if index == 0:\n",
    "        break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "186dbaf6",
   "metadata": {},
   "outputs": [],
   "source": [
    "i[0][2].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8012c38c",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.plot(i[1][0])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77b883a5",
   "metadata": {},
   "source": [
    "for j in range(200):\n",
    "    cv2.imshow(\"Frame\",i[0][0][j].cpu().numpy().astype('uint8'))\n",
    "        \n",
    "    if cv2.waitKey(25) & 0xFF == ord('q'):\n",
    "            break\n",
    "        \n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ac8544a",
   "metadata": {},
   "source": [
    "# Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1bfc13bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Model Number 2\n",
    "\n",
    "from torch import nn\n",
    "from tqdm.notebook import tqdm\n",
    "\n",
    "class fc_block(nn.Module):\n",
    "    def __init__(self,in_channel,out_channel,dropout,act = True):\n",
    "        super(fc_block, self).__init__()\n",
    "        self.fc = nn.Linear(in_channel, out_channel)\n",
    "        self.bn = nn.BatchNorm1d(out_channel)\n",
    "        self.dropout = nn.Dropout(p=dropout)\n",
    "        self.relu = nn.ReLU()\n",
    "        self.act = act\n",
    "\n",
    "    def forward(self,x):\n",
    "        #print(x.shape)\n",
    "        x = self.fc(x)\n",
    "        x = self.bn(x)\n",
    "        x = self.dropout(x)\n",
    "        if self.act == True:\n",
    "            x = self.relu(x)\n",
    "        return x\n",
    "\n",
    "class cnn_block(nn.Module):\n",
    "    def __init__(self,in_channel,out_channel,kernel_size,stride,dropout):\n",
    "        super(cnn_block, self).__init__()\n",
    "        #self.cnn = nn.Conv2d(in_channel,out_channel, kernel_size=kernel_size, stride=stride, padding=0)\n",
    "        self.depthwise_conv = nn.Conv2d(in_channels=in_channel, out_channels=in_channel, kernel_size=kernel_size,stride = stride, groups=in_channel)\n",
    "        self.pointwise_conv = nn.Conv2d(in_channels=in_channel, out_channels=out_channel, kernel_size=1)\n",
    "        self.bn = nn.BatchNorm2d(out_channel)\n",
    "        self.dropout = nn.Dropout(p=dropout)\n",
    "        self.relu = nn.ReLU()\n",
    "\n",
    "    def forward(self,x):\n",
    "        #x = self.cnn(x)\n",
    "        x = self.depthwise_conv(x)\n",
    "        x = self.pointwise_conv(x)\n",
    "        x = self.bn(x)\n",
    "        x = self.dropout(x)\n",
    "        x = self.relu(x)\n",
    "        return x\n",
    "\n",
    "class branch(nn.Module):\n",
    "    def __init__(self,in_channel,out_channel,dropout):\n",
    "      super(branch,self).__init__()\n",
    "      self.fc1 = fc_block( in_channel, 256, 0.2)\n",
    "      self.fc2 = fc_block( 256, 256, 0.2)\n",
    "      self.fc3 = fc_block( 256, out_channel, 0.2,act = False)\n",
    "\n",
    "    def forward(self,x):\n",
    "        x = self.fc1(x)\n",
    "        x = self.fc2(x)\n",
    "        x = self.fc3(x)\n",
    "        return x\n",
    "\n",
    "class Lambda(nn.Module):\n",
    "    def __init__(self, lambd):\n",
    "        super(Lambda, self).__init__()\n",
    "        self.lambd = lambd\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.lambd(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b02ece46",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Model(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(Model, self).__init__()\n",
    "\n",
    "        # Image processing configuration\n",
    "\n",
    "        self.cnn_1 = cnn_block(3,32,5,2,0.5)\n",
    "        self.cnn_2 = cnn_block(32,32,3,1,0.5)\n",
    "\n",
    "        self.cnn_3 = cnn_block(32,64,3,2,0.5)\n",
    "        self.cnn_4 = cnn_block(64,64,3,1,0.5)\n",
    "\n",
    "        self.cnn_5 = cnn_block(64,128,3,2,0.5)\n",
    "        self.cnn_6 = cnn_block(128,128,3,1,0.5)\n",
    "\n",
    "        self.cnn_7 = cnn_block(128,256,3,1,0.5)\n",
    "        self.cnn_8 = cnn_block(256,256,3,1,0.5)\n",
    "\n",
    "\n",
    "        self.fc_img_1 = fc_block( 256*16*2, 512, 0.2)\n",
    "        self.fc_img_2 = fc_block( 512, 512, 0.2)\n",
    "\n",
    "        # Speed processing configuration\n",
    "        self.fc_speed_1 = fc_block( 1, 128, 0.2)\n",
    "        self.fc_speed_2 = fc_block( 128, 128, 0.2)\n",
    "\n",
    "        # Branching\n",
    "        self.fc_default_branch = branch(640+3,3,0.2)\n",
    "\n",
    "        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "        #self.device = 'cpu'\n",
    "\n",
    "\n",
    "    def forward(self, x_img, x_speed, commands):\n",
    "\n",
    "        #print(commands)\n",
    "        x_img = x_img/255 - 0.5\n",
    "        # Image processing layers\n",
    "        #print(x_img.shape)\n",
    "        x_img = self.cnn_1(x_img)\n",
    "        #print(x_img.shape)\n",
    "        x_img = self.cnn_2(x_img)\n",
    "        #print(x_img.shape)\n",
    "        x_img = self.cnn_3(x_img)\n",
    "        #print(x_img.shape)\n",
    "        x_img = self.cnn_4(x_img)\n",
    "        #print(x_img.shape)\n",
    "        x_img = self.cnn_5(x_img)\n",
    "        #print(x_img.shape)\n",
    "        x_img = self.cnn_6(x_img)\n",
    "        #print(x_img.shape)\n",
    "        x_img = self.cnn_7(x_img)\n",
    "        #print(x_img.shape)\n",
    "        x_img = self.cnn_8(x_img)\n",
    "        #print(x_img.shape)\n",
    "        \n",
    "        x_img = x_img.reshape(-1, 256*16*2)\n",
    "        x_img = self.fc_img_1(x_img)\n",
    "        x_img = self.fc_img_2(x_img)\n",
    "\n",
    "\n",
    "        # Speed Processing Layers\n",
    "        x_speed = self.fc_speed_1(x_speed)\n",
    "        x_speed = self.fc_speed_2(x_speed)\n",
    "\n",
    "        # Fusion \n",
    "        x_joint = torch.cat([x_img,x_speed,commands],axis = 1)\n",
    "\n",
    "        branch_output = self.fc_default_branch(x_joint)\n",
    "        return branch_output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5712e0f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71a1582b",
   "metadata": {},
   "source": [
    "# Training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d13237eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# check if CUDA is available\n",
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "\n",
    "# Train your model\n",
    "model = Model().to(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4c34ee52",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Count the number of parameters\n",
    "num_params = sum(p.numel() for p in model.parameters())\n",
    "\n",
    "print(\"Number of parameters in the model:\", num_params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "66cb6540",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# Define your loss function and optimizer\n",
    "from livelossplot import PlotLosses\n",
    "\n",
    "criterion = nn.MSELoss()\n",
    "optimizer = torch.optim.AdamW(model.parameters(), lr=0.01,weight_decay=1e-2)\n",
    "FILE_PATH = \"model_cnn.pth\"\n",
    "model.load_state_dict(torch.load(FILE_PATH))\n",
    "\n",
    "liveloss = PlotLosses()\n",
    "counter = 0\n",
    "\n",
    "for epoch in tqdm(range(50),desc = 'Epochs : '):\n",
    "    logs = {}\n",
    "\n",
    "    for phase in ['train','val']:\n",
    "\n",
    "        running_loss = 0.0\n",
    "        for inputs,targets in tqdm(dataloader[phase],desc = phase + ' : '):\n",
    "\n",
    "            inputs_img = inputs[0].permute(0,3,1,2).to(device)\n",
    "            inputs_speed = inputs[1].unsqueeze(1).to(device).to(torch.float32)\n",
    "            inputs_command = inputs[2].to(device).to(torch.float32)\n",
    "            labels = torch.cat([i.unsqueeze(1) for i in targets],axis = 1).to(device).to(torch.float32)\n",
    "\n",
    "            outputs = model(inputs_img,inputs_speed,inputs_command)\n",
    "\n",
    "            if phase == 'train':\n",
    "                optimizer.zero_grad()\n",
    "                loss = criterion(outputs, labels)\n",
    "                loss.backward()\n",
    "                optimizer.step()\n",
    "\n",
    "            running_loss += loss.item() * inputs_img.size(0)\n",
    "            epoch_loss = running_loss / len(dataloader[phase].dataset)\n",
    "\n",
    "            prefix = ''\n",
    "            if phase == 'val':\n",
    "                prefix = 'val_'\n",
    "\n",
    "            logs[prefix + 'mse'] = np.sqrt(epoch_loss)\n",
    "\n",
    "            # Save the model\n",
    "            torch.save(model.state_dict(), FILE_PATH)\n",
    "\n",
    "    liveloss.update(logs)\n",
    "    liveloss.draw()\n",
    "\n",
    "\n",
    "    print(\"Epoch {} loss: {}\".format(epoch, epoch_loss))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e82637e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create an instance of your custom dataset\n",
    "train_dataset = CustomDataset(mode = 'train',over_sampling = False)\n",
    "val_dataset = CustomDataset(mode = 'val',over_sampling = False)\n",
    "\n",
    "dataloader = {'train' : DataLoader(train_dataset, batch_size=batch_size, shuffle=False),\n",
    "              'val' : DataLoader(val_dataset, batch_size=batch_size, shuffle=False)}\n",
    "\n",
    "in_data1 = []\n",
    "in_data2 = []\n",
    "out_data = []\n",
    "for idx,(inputs,outputs) in enumerate(dataloader['val']):\n",
    "    in_data1.append(inputs[0])\n",
    "    in_data2.append(inputs[1])\n",
    "    out_data.append(torch.cat([i.unsqueeze(1) for i in outputs],axis = 1))\n",
    "    \n",
    "in_data1 = torch.cat(in_data1,axis = 0).to(device).permute(0,3,1,2)\n",
    "in_data2 = torch.cat(in_data2,axis = 0).to(device).unsqueeze(1).to(torch.float32)\n",
    "out_data = torch.cat(out_data,axis = 0).to(device)\n",
    "\n",
    "in_data1.shape,in_data2.shape,out_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "efa0693a",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_data = model(in_data1,in_data2,inputs_command)\n",
    "\n",
    "out_data = out_data.detach().cpu().numpy()\n",
    "pred_data = pred_data.detach().cpu().numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "605814aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "def exponential_smoothing(arr, alpha = 0.2):\n",
    "    smoothed = np.zeros_like(arr)\n",
    "    smoothed[0] = arr[0]  # The first value remains the same\n",
    "\n",
    "    for i in range(1, len(arr)):\n",
    "        smoothed[i] = alpha * arr[i] + (1 - alpha) * smoothed[i - 1]\n",
    "\n",
    "    return smoothed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e35fbae5",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "plt.figure(figsize = (8,5))\n",
    "plt.plot(pred_data[:,0])\n",
    "plt.plot(out_data[:,0])\n",
    "plt.plot(exponential_smoothing(pred_data[:,0]))\n",
    "plt.legend([\"pred\",\"Actual\",\"smoothed\"])\n",
    "plt.title(\"Steer\")\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize = (8,5))\n",
    "plt.plot(pred_data[:,1])\n",
    "plt.plot(out_data[:,1])\n",
    "plt.plot(exponential_smoothing(pred_data[:,1]))\n",
    "plt.legend([\"pred\",\"Actual\",\"smoothed\"])\n",
    "plt.title(\"Acc Pedal\")\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize = (8,5))\n",
    "plt.plot(pred_data[:,2])\n",
    "plt.plot(out_data[:,2])\n",
    "plt.plot(exponential_smoothing(pred_data[:,2]))\n",
    "plt.legend([\"pred\",\"Actual\",\"smoothed\"])\n",
    "plt.title(\"Brake\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8e64f5d8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
