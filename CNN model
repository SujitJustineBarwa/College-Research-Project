A
       " '.\\\\Images\\\\100.221597505.png',\n",
       " '.\\\\Images\\\\100.271597506.png',\n",
       " '.\\\\Images\\\\100.321597507.png',\n",
       " '.\\\\Images\\\\100.371597507.png',\n",
       " '.\\\\Images\\\\100.421597508.png',\n",
       " '.\\\\Images\\\\100.471597509.png',\n",
       " '.\\\\Images\\\\100.52159751.png',\n",
       " '.\\\\Images\\\\100.57159751.png',\n",
       " '.\\\\Images\\\\100.671597512.png',\n",
       " '.\\\\Images\\\\100.721597513.png',\n",
       " '.\\\\Images\\\\100.771597513.png',\n",
       " '.\\\\Images\\\\107.171597609.png',\n",
       " '.\\\\Images\\\\107.22159761.png',\n",
       " '.\\\\Images\\\\107.321597611.png',\n",
       " '.\\\\Images\\\\107.371597612.png',\n",
       " '.\\\\Images\\\\107.421597613.png',\n",
       " '.\\\\Images\\\\107.471597613.png',\n",
       " '.\\\\Images\\\\107.521597614.png',\n",
       " '.\\\\Images\\\\107.571597615.png',\n",
       " '.\\\\Images\\\\107.621597616.png',\n",
       " '.\\\\Images\\\\107.671597616.png',\n",
       " '.\\\\Images\\\\107.721597617.png',\n",
       " '.\\\\Images\\\\107.771597618.png',\n",
       " '.\\\\Images\\\\107.821597618.png',\n",
       " '.\\\\Images\\\\107.871597619.png',\n",
       " '.\\\\Images\\\\107.92159762.png',\n",
       " '.\\\\Images\\\\107.971597621.png',\n",
       " '.\\\\Images\\\\108.021597621.png',\n",
       " '.\\\\Images\\\\108.071597622.png',\n",
       " '.\\\\Images\\\\108.121597623.png',\n",
       " '.\\\\Images\\\\108.171597624.png',\n",
       " '.\\\\Images\\\\108.221597624.png',\n",
       " '.\\\\Images\\\\108.271597625.png',\n",
       " '.\\\\Images\\\\108.321597626.png',\n",
       " '.\\\\Images\\\\108.371597627.png',\n",
       " '.\\\\Images\\\\108.421597627.png',\n",
       " '.\\\\Images\\\\108.471597628.png',\n",
       " '.\\\\Images\\\\108.521597629.png',\n",
       " '.\\\\Images\\\\108.57159763.png',\n",
       " '.\\\\Images\\\\108.62159763.png',\n",
       " '.\\\\Images\\\\108.671597631.png',\n",
       " '.\\\\Images\\\\108.721597632.png',\n",
       " '.\\\\Images\\\\108.771597633.png',\n",
       " '.\\\\Images\\\\108.821597633.png',\n",
       " '.\\\\Images\\\\108.871597634.png',\n",
       " '.\\\\Images\\\\108.921597635.png',\n",
       " '.\\\\Images\\\\108.971597636.png',\n",
       " '.\\\\Images\\\\109.021597636.png',\n",
       " '.\\\\Images\\\\109.071597637.png',\n",
       " '.\\\\Images\\\\109.121597638.png',\n",
       " '.\\\\Images\\\\109.171597639.png',\n",
       " '.\\\\Images\\\\109.221597639.png',\n",
       " '.\\\\Images\\\\109.27159764.png',\n",
       " '.\\\\Images\\\\109.321597641.png',\n",
       " '.\\\\Images\\\\109.371597642.png',\n",
       " '.\\\\Images\\\\109.421597642.png',\n",
       " '.\\\\Images\\\\109.471597643.png',\n",
       " '.\\\\Images\\\\109.521597644.png',\n",
       " '.\\\\Images\\\\109.571597645.png',\n",
       " '.\\\\Images\\\\109.621597645.png',\n",
       " '.\\\\Images\\\\109.671597646.png',\n",
       " '.\\\\Images\\\\109.721597647.png',\n",
       " '.\\\\Images\\\\109.771597648.png',\n",
       " '.\\\\Images\\\\109.821597648.png',\n",
       " '.\\\\Images\\\\109.871597649.png',\n",
       " '.\\\\Images\\\\109.92159765.png',\n",
       " '.\\\\Images\\\\109.971597651.png',\n",
       " '.\\\\Images\\\\110.021597651.png',\n",
       " '.\\\\Images\\\\110.071597652.png',\n",
       " '.\\\\Images\\\\110.121597653.png',\n",
       " '.\\\\Images\\\\110.171597653.png',\n",
       " '.\\\\Images\\\\110.221597654.png',\n",
       " '.\\\\Images\\\\110.271597655.png',\n",
       " '.\\\\Images\\\\110.321597656.png',\n",
       " '.\\\\Images\\\\110.371597656.png',\n",
       " '.\\\\Images\\\\110.421597657.png',\n",
       " '.\\\\Images\\\\110.471597658.png',\n",
       " '.\\\\Images\\\\110.521597659.png',\n",
       " '.\\\\Images\\\\110.571597659.png',\n",
       " '.\\\\Images\\\\110.62159766.png',\n",
       " '.\\\\Images\\\\110.721597662.png',\n",
       " '.\\\\Images\\\\110.771597662.png',\n",
       " '.\\\\Images\\\\110.821597663.png',\n",
       " '.\\\\Images\\\\110.871597664.png',\n",
       " '.\\\\Images\\\\110.921597665.png',\n",
       " '.\\\\Images\\\\110.971597665.png',\n",
       " '.\\\\Images\\\\111.021597666.png',\n",
       " '.\\\\Images\\\\111.071597667.png',\n",
       " '.\\\\Images\\\\111.121597668.png',\n",
       " '.\\\\Images\\\\111.171597668.png',\n",
       " '.\\\\Images\\\\111.221597669.png',\n",
       " '.\\\\Images\\\\111.27159767.png',\n",
       " '.\\\\Images\\\\111.321597671.png',\n",
       " '.\\\\Images\\\\111.371597671.png',\n",
       " '.\\\\Images\\\\111.421597672.png',\n",
       " '.\\\\Images\\\\111.471597673.png',\n",
       " '.\\\\Images\\\\111.521597674.png',\n",
       " '.\\\\Images\\\\111.571597674.png',\n",
       " '.\\\\Images\\\\111.621597675.png',\n",
       " '.\\\\Images\\\\111.671597676.png',\n",
       " '.\\\\Images\\\\111.721597677.png',\n",
       " '.\\\\Images\\\\111.821597678.png',\n",
       " '.\\\\Images\\\\111.871597679.png',\n",
       " '.\\\\Images\\\\111.92159768.png',\n",
       " '.\\\\Images\\\\111.97159768.png',\n",
       " '.\\\\Images\\\\112.071597682.png',\n",
       " '.\\\\Images\\\\112.121597683.png',\n",
       " '.\\\\Images\\\\112.171597683.png',\n",
       " '.\\\\Images\\\\112.221597684.png',\n",
       " '.\\\\Images\\\\112.271597685.png',\n",
       " '.\\\\Images\\\\112.321597686.png',\n",
       " '.\\\\Images\\\\112.371597686.png',\n",
       " '.\\\\Images\\\\112.421597687.png',\n",
       " '.\\\\Images\\\\112.471597688.png',\n",
       " '.\\\\Images\\\\112.521597689.png',\n",
       " '.\\\\Images\\\\112.62159769.png',\n",
       " '.\\\\Images\\\\112.671597691.png',\n",
       " '.\\\\Images\\\\112.721597691.png',\n",
       " '.\\\\Images\\\\112.771597692.png',\n",
       " '.\\\\Images\\\\112.821597693.png',\n",
       " '.\\\\Images\\\\112.871597694.png',\n",
       " '.\\\\Images\\\\112.921597694.png',\n",
       " '.\\\\Images\\\\112.971597695.png',\n",
       " '.\\\\Images\\\\113.021597696.png',\n",
       " '.\\\\Images\\\\113.071597697.png',\n",
       " '.\\\\Images\\\\113.121597697.png',\n",
       " '.\\\\Images\\\\113.171597698.png',\n",
       " '.\\\\Images\\\\113.221597699.png',\n",
       " '.\\\\Images\\\\113.2715977.png',\n",
       " '.\\\\Images\\\\113.3215977.png',\n",
       " '.\\\\Images\\\\113.371597701.png',\n",
       " '.\\\\Images\\\\113.421597702.png',\n",
       " '.\\\\Images\\\\113.471597703.png',\n",
       " '.\\\\Images\\\\113.521597703.png',\n",
       " '.\\\\Images\\\\113.571597704.png',\n",
       " '.\\\\Images\\\\113.621597705.png',\n",
       " '.\\\\Images\\\\113.671597706.png',\n",
       " '.\\\\Images\\\\113.721597706.png',\n",
       " '.\\\\Images\\\\113.771597707.png',\n",
       " '.\\\\Images\\\\113.821597708.png',\n",
       " '.\\\\Images\\\\113.871597709.png',\n",
       " '.\\\\Images\\\\113.921597709.png',\n",
       " '.\\\\Images\\\\113.97159771.png',\n",
       " '.\\\\Images\\\\137.371598059.png',\n",
       " '.\\\\Images\\\\137.42159806.png',\n",
       " '.\\\\Images\\\\137.47159806.png',\n",
       " '.\\\\Images\\\\137.521598061.png',\n",
       " '.\\\\Images\\\\137.571598062.png',\n",
       " '.\\\\Images\\\\137.671598063.png',\n",
       " '.\\\\Images\\\\137.721598064.png',\n",
       " '.\\\\Images\\\\137.771598065.png',\n",
       " '.\\\\Images\\\\137.821598066.png',\n",
       " '.\\\\Images\\\\137.871598066.png',\n",
       " '.\\\\Images\\\\137.921598067.png',\n",
       " '.\\\\Images\\\\137.971598068.png',\n",
       " '.\\\\Images\\\\138.021598068.png',\n",
       " '.\\\\Images\\\\138.12159807.png',\n",
       " '.\\\\Images\\\\138.171598071.png',\n",
       " '.\\\\Images\\\\138.221598071.png',\n",
       " '.\\\\Images\\\\138.271598072.png',\n",
       " '.\\\\Images\\\\138.321598073.png',\n",
       " '.\\\\Images\\\\138.371598074.png',\n",
       " '.\\\\Images\\\\138.421598074.png',\n",
       " '.\\\\Images\\\\138.471598075.png',\n",
       " '.\\\\Images\\\\138.521598076.png',\n",
       " '.\\\\Images\\\\138.571598077.png',\n",
       " '.\\\\Images\\\\138.621598077.png',\n",
       " '.\\\\Images\\\\138.671598078.png',\n",
       " '.\\\\Images\\\\138.721598079.png',\n",
       " '.\\\\Images\\\\138.77159808.png',\n",
       " '.\\\\Images\\\\138.82159808.png',\n",
       " '.\\\\Images\\\\138.871598081.png',\n",
       " '.\\\\Images\\\\138.921598082.png',\n",
       " '.\\\\Images\\\\138.971598083.png',\n",
       " '.\\\\Images\\\\139.021598083.png',\n",
       " '.\\\\Images\\\\139.121598085.png',\n",
       " '.\\\\Images\\\\139.171598086.png',\n",
       " '.\\\\Images\\\\139.221598086.png',\n",
       " '.\\\\Images\\\\139.271598087.png',\n",
       " '.\\\\Images\\\\139.321598088.png',\n",
       " '.\\\\Images\\\\139.371598089.png',\n",
       " '.\\\\Images\\\\139.421598089.png',\n",
       " '.\\\\Images\\\\139.47159809.png',\n",
       " '.\\\\Images\\\\139.521598091.png',\n",
       " '.\\\\Images\\\\139.571598092.png',\n",
       " '.\\\\Images\\\\139.621598092.png',\n",
       " '.\\\\Images\\\\139.671598093.png',\n",
       " '.\\\\Images\\\\139.721598094.png',\n",
       " '.\\\\Images\\\\139.771598095.png',\n",
       " '.\\\\Images\\\\139.821598095.png',\n",
       " '.\\\\Images\\\\139.871598096.png',\n",
       " '.\\\\Images\\\\139.921598097.png',\n",
       " '.\\\\Images\\\\139.971598098.png',\n",
       " '.\\\\Images\\\\140.021598098.png',\n",
       " '.\\\\Images\\\\140.071598099.png',\n",
       " '.\\\\Images\\\\140.1215981.png',\n",
       " '.\\\\Images\\\\140.171598101.png',\n",
       " '.\\\\Images\\\\140.221598101.png',\n",
       " '.\\\\Images\\\\140.271598102.png',\n",
       " '.\\\\Images\\\\140.321598103.png',\n",
       " '.\\\\Images\\\\140.371598104.png',\n",
       " '.\\\\Images\\\\140.471598105.png',\n",
       " '.\\\\Images\\\\140.521598106.png',\n",
       " '.\\\\Images\\\\140.571598106.png',\n",
       " '.\\\\Images\\\\140.621598107.png',\n",
       " '.\\\\Images\\\\140.671598108.png',\n",
       " '.\\\\Images\\\\140.721598109.png',\n",
       " '.\\\\Images\\\\140.771598109.png',\n",
       " '.\\\\Images\\\\140.82159811.png',\n",
       " '.\\\\Images\\\\140.871598111.png',\n",
       " '.\\\\Images\\\\140.921598112.png',\n",
       " '.\\\\Images\\\\140.971598112.png',\n",
       " '.\\\\Images\\\\141.021598113.png',\n",
       " '.\\\\Images\\\\141.071598114.png',\n",
       " '.\\\\Images\\\\141.121598115.png',\n",
       " '.\\\\Images\\\\141.171598115.png',\n",
       " '.\\\\Images\\\\141.221598116.png',\n",
       " '.\\\\Images\\\\141.271598117.png',\n",
       " '.\\\\Images\\\\141.371598118.png',\n",
       " '.\\\\Images\\\\141.421598119.png',\n",
       " '.\\\\Images\\\\141.47159812.png',\n",
       " '.\\\\Images\\\\141.521598121.png',\n",
       " '.\\\\Images\\\\141.571598121.png',\n",
       " '.\\\\Images\\\\141.621598122.png',\n",
       " '.\\\\Images\\\\141.671598123.png',\n",
       " '.\\\\Images\\\\141.721598124.png',\n",
       " '.\\\\Images\\\\141.771598124.png',\n",
       " '.\\\\Images\\\\141.821598125.png',\n",
       " '.\\\\Images\\\\141.871598126.png',\n",
       " '.\\\\Images\\\\141.921598127.png',\n",
       " '.\\\\Images\\\\141.971598127.png',\n",
       " '.\\\\Images\\\\142.021598128.png',\n",
       " '.\\\\Images\\\\142.071598129.png',\n",
       " '.\\\\Images\\\\142.12159813.png',\n",
       " '.\\\\Images\\\\142.17159813.png',\n",
       " '.\\\\Images\\\\142.221598131.png',\n",
       " '.\\\\Images\\\\142.271598132.png',\n",
       " '.\\\\Images\\\\142.321598133.png',\n",
       " '.\\\\Images\\\\142.371598133.png',\n",
       " '.\\\\Images\\\\142.421598134.png',\n",
       " '.\\\\Images\\\\142.471598135.png',\n",
       " '.\\\\Images\\\\142.521598136.png',\n",
       " '.\\\\Images\\\\142.571598136.png',\n",
       " '.\\\\Images\\\\142.621598137.png',\n",
       " '.\\\\Images\\\\142.671598138.png',\n",
       " '.\\\\Images\\\\142.721598139.png',\n",
       " '.\\\\Images\\\\142.771598139.png',\n",
       " '.\\\\Images\\\\142.82159814.png',\n",
       " '.\\\\Images\\\\142.871598141.png',\n",
       " '.\\\\Images\\\\142.921598142.png',\n",
       " '.\\\\Images\\\\142.971598142.png',\n",
       " '.\\\\Images\\\\143.021598143.png',\n",
       " '.\\\\Images\\\\143.071598144.png',\n",
       " '.\\\\Images\\\\143.121598144.png',\n",
       " '.\\\\Images\\\\143.171598145.png',\n",
       " '.\\\\Images\\\\143.221598146.png',\n",
       " '.\\\\Images\\\\143.271598147.png',\n",
       " '.\\\\Images\\\\143.321598147.png',\n",
       " '.\\\\Images\\\\143.371598148.png',\n",
       " '.\\\\Images\\\\143.421598149.png',\n",
       " '.\\\\Images\\\\143.52159815.png',\n",
       " '.\\\\Images\\\\143.571598151.png',\n",
       " '.\\\\Images\\\\143.621598152.png',\n",
       " '.\\\\Images\\\\143.671598153.png',\n",
       " '.\\\\Images\\\\143.721598153.png',\n",
       " '.\\\\Images\\\\143.821598155.png',\n",
       " '.\\\\Images\\\\143.871598156.png',\n",
       " '.\\\\Images\\\\143.921598156.png',\n",
       " '.\\\\Images\\\\143.971598157.png',\n",
       " '.\\\\Images\\\\144.021598158.png',\n",
       " '.\\\\Images\\\\144.071598159.png',\n",
       " '.\\\\Images\\\\144.121598159.png',\n",
       " '.\\\\Images\\\\144.17159816.png',\n",
       " '.\\\\Images\\\\144.221598161.png',\n",
       " '.\\\\Images\\\\144.271598162.png',\n",
       " '.\\\\Images\\\\144.321598162.png',\n",
       " '.\\\\Images\\\\144.371598163.png',\n",
       " '.\\\\Images\\\\144.421598164.png',\n",
       " '.\\\\Images\\\\144.471598165.png',\n",
       " '.\\\\Images\\\\144.521598165.png',\n",
       " '.\\\\Images\\\\144.571598166.png',\n",
       " '.\\\\Images\\\\144.621598167.png',\n",
       " '.\\\\Images\\\\144.671598168.png',\n",
       " '.\\\\Images\\\\144.721598168.png',\n",
       " '.\\\\Images\\\\144.771598169.png',\n",
       " '.\\\\Images\\\\144.82159817.png',\n",
       " '.\\\\Images\\\\144.871598171.png',\n",
       " '.\\\\Images\\\\144.921598171.png',\n",
       " '.\\\\Images\\\\144.971598172.png',\n",
       " '.\\\\Images\\\\145.021598173.png',\n",
       " '.\\\\Images\\\\145.071598174.png',\n",
       " '.\\\\Images\\\\145.121598174.png',\n",
       " '.\\\\Images\\\\145.171598175.png',\n",
       " '.\\\\Images\\\\145.221598176.png',\n",
       " '.\\\\Images\\\\145.271598177.png',\n",
       " '.\\\\Images\\\\145.321598177.png',\n",
       " '.\\\\Images\\\\145.371598178.png',\n",
       " '.\\\\Images\\\\145.421598179.png',\n",
       " '.\\\\Images\\\\145.52159818.png',\n",
       " '.\\\\Images\\\\145.571598181.png',\n",
       " '.\\\\Images\\\\145.621598182.png',\n",
       " '.\\\\Images\\\\145.671598182.png',\n",
       " '.\\\\Images\\\\145.721598183.png',\n",
       " '.\\\\Images\\\\145.771598184.png',\n",
       " '.\\\\Images\\\\145.871598185.png',\n",
       " '.\\\\Images\\\\145.921598186.png',\n",
       " '.\\\\Images\\\\145.971598187.png',\n",
       " '.\\\\Images\\\\146.021598188.png',\n",
       " '.\\\\Images\\\\146.071598188.png',\n",
       " '.\\\\Images\\\\146.121598189.png',\n",
       " '.\\\\Images\\\\146.17159819.png',\n",
       " '.\\\\Images\\\\146.221598191.png',\n",
       " '.\\\\Images\\\\146.271598191.png',\n",
       " '.\\\\Images\\\\146.321598192.png',\n",
       " '.\\\\Images\\\\146.371598193.png',\n",
       " '.\\\\Images\\\\146.421598194.png',\n",
       " '.\\\\Images\\\\146.471598194.png',\n",
       " '.\\\\Images\\\\146.521598195.png',\n",
       " '.\\\\Images\\\\146.571598196.png',\n",
       " '.\\\\Images\\\\146.621598197.png',\n",
       " '.\\\\Images\\\\146.671598197.png',\n",
       " '.\\\\Images\\\\146.721598198.png',\n",
       " '.\\\\Images\\\\146.771598199.png',\n",
       " '.\\\\Images\\\\146.8215982.png',\n",
       " '.\\\\Images\\\\146.8715982.png',\n",
       " '.\\\\Images\\\\146.921598201.png',\n",
       " '.\\\\Images\\\\146.971598202.png',\n",
       " '.\\\\Images\\\\147.021598203.png',\n",
       " '.\\\\Images\\\\147.071598203.png',\n",
       " '.\\\\Images\\\\147.121598204.png',\n",
       " '.\\\\Images\\\\147.171598205.png',\n",
       " '.\\\\Images\\\\147.221598206.png',\n",
       " '.\\\\Images\\\\147.271598206.png',\n",
       " '.\\\\Images\\\\147.321598207.png',\n",
       " '.\\\\Images\\\\147.371598208.png',\n",
       " '.\\\\Images\\\\147.421598209.png',\n",
       " '.\\\\Images\\\\147.471598209.png',\n",
       " '.\\\\Images\\\\147.52159821.png',\n",
       " '.\\\\Images\\\\147.571598211.png',\n",
       " '.\\\\Images\\\\147.621598212.png',\n",
       " '.\\\\Images\\\\147.671598212.png',\n",
       " '.\\\\Images\\\\147.721598213.png',\n",
       " '.\\\\Images\\\\147.771598214.png',\n",
       " '.\\\\Images\\\\147.821598215.png',\n",
       " '.\\\\Images\\\\147.871598215.png',\n",
       " '.\\\\Images\\\\147.921598216.png',\n",
       " '.\\\\Images\\\\147.971598217.png',\n",
       " '.\\\\Images\\\\148.021598218.png',\n",
       " '.\\\\Images\\\\148.071598218.png',\n",
       " '.\\\\Images\\\\148.17159822.png',\n",
       " '.\\\\Images\\\\148.22159822.png',\n",
       " '.\\\\Images\\\\148.271598221.png',\n",
       " '.\\\\Images\\\\148.321598222.png',\n",
       " '.\\\\Images\\\\148.371598223.png',\n",
       " '.\\\\Images\\\\148.421598223.png',\n",
       " '.\\\\Images\\\\148.471598224.png',\n",
       " '.\\\\Images\\\\148.521598225.png',\n",
       " '.\\\\Images\\\\148.571598226.png',\n",
       " '.\\\\Images\\\\148.621598226.png',\n",
       " '.\\\\Images\\\\148.671598227.png',\n",
       " '.\\\\Images\\\\148.721598228.png',\n",
       " '.\\\\Images\\\\148.771598229.png',\n",
       " '.\\\\Images\\\\148.821598229.png',\n",
       " '.\\\\Images\\\\148.87159823.png',\n",
       " '.\\\\Images\\\\148.921598231.png',\n",
       " '.\\\\Images\\\\148.971598232.png',\n",
       " '.\\\\Images\\\\149.021598232.png',\n",
       " '.\\\\Images\\\\149.071598233.png',\n",
       " '.\\\\Images\\\\149.121598234.png',\n",
       " '.\\\\Images\\\\149.171598235.png',\n",
       " '.\\\\Images\\\\149.221598235.png',\n",
       " '.\\\\Images\\\\149.271598236.png',\n",
       " '.\\\\Images\\\\149.321598237.png',\n",
       " '.\\\\Images\\\\149.371598238.png',\n",
       " '.\\\\Images\\\\149.421598238.png',\n",
       " '.\\\\Images\\\\149.52159824.png',\n",
       " '.\\\\Images\\\\149.621598241.png',\n",
       " '.\\\\Images\\\\149.721598243.png',\n",
       " '.\\\\Images\\\\149.771598244.png',\n",
       " '.\\\\Images\\\\149.821598244.png',\n",
       " '.\\\\Images\\\\149.871598245.png',\n",
       " '.\\\\Images\\\\149.921598246.png',\n",
       " '.\\\\Images\\\\149.971598247.png',\n",
       " '.\\\\Images\\\\150.021598247.png',\n",
       " '.\\\\Images\\\\150.071598248.png',\n",
       " '.\\\\Images\\\\150.121598249.png',\n",
       " '.\\\\Images\\\\150.22159825.png',\n",
       " '.\\\\Images\\\\150.271598251.png',\n",
       " '.\\\\Images\\\\150.321598252.png',\n",
       " '.\\\\Images\\\\150.371598253.png',\n",
       " '.\\\\Images\\\\150.421598253.png',\n",
       " '.\\\\Images\\\\150.471598254.png',\n",
       " '.\\\\Images\\\\150.521598255.png',\n",
       " '.\\\\Images\\\\150.571598256.png',\n",
       " '.\\\\Images\\\\150.621598256.png',\n",
       " '.\\\\Images\\\\150.671598257.png',\n",
       " '.\\\\Images\\\\150.721598258.png',\n",
       " '.\\\\Images\\\\150.771598258.png',\n",
       " '.\\\\Images\\\\150.821598259.png',\n",
       " '.\\\\Images\\\\150.87159826.png',\n",
       " '.\\\\Images\\\\150.921598261.png',\n",
       " '.\\\\Images\\\\150.971598261.png',\n",
       " '.\\\\Images\\\\151.021598262.png',\n",
       " '.\\\\Images\\\\151.071598263.png',\n",
       " '.\\\\Images\\\\151.121598264.png',\n",
       " '.\\\\Images\\\\151.171598264.png',\n",
       " '.\\\\Images\\\\151.221598265.png',\n",
       " '.\\\\Images\\\\151.271598266.png',\n",
       " '.\\\\Images\\\\151.321598267.png',\n",
       " '.\\\\Images\\\\151.371598267.png',\n",
       " '.\\\\Images\\\\151.421598268.png',\n",
       " '.\\\\Images\\\\151.471598269.png',\n",
       " '.\\\\Images\\\\151.52159827.png',\n",
       " '.\\\\Images\\\\151.57159827.png',\n",
       " '.\\\\Images\\\\151.621598271.png',\n",
       " '.\\\\Images\\\\151.671598272.png',\n",
       " '.\\\\Images\\\\151.721598273.png',\n",
       " '.\\\\Images\\\\151.771598273.png',\n",
       " '.\\\\Images\\\\151.821598274.png',\n",
       " '.\\\\Images\\\\151.871598275.png',\n",
       " '.\\\\Images\\\\151.921598276.png',\n",
       " '.\\\\Images\\\\151.971598276.png',\n",
       " '.\\\\Images\\\\152.021598277.png',\n",
       " '.\\\\Images\\\\152.071598278.png',\n",
       " '.\\\\Images\\\\152.121598279.png',\n",
       " '.\\\\Images\\\\152.171598279.png',\n",
       " '.\\\\Images\\\\152.22159828.png',\n",
       " '.\\\\Images\\\\152.271598281.png',\n",
       " '.\\\\Images\\\\152.321598282.png',\n",
       " '.\\\\Images\\\\152.371598282.png',\n",
       " '.\\\\Images\\\\152.421598283.png',\n",
       " '.\\\\Images\\\\152.471598284.png',\n",
       " '.\\\\Images\\\\152.521598285.png',\n",
       " '.\\\\Images\\\\152.571598285.png',\n",
       " '.\\\\Images\\\\152.621598286.png',\n",
       " '.\\\\Images\\\\152.671598287.png',\n",
       " '.\\\\Images\\\\152.721598288.png',\n",
       " '.\\\\Images\\\\152.771598288.png',\n",
       " '.\\\\Images\\\\152.821598289.png',\n",
       " '.\\\\Images\\\\152.87159829.png',\n",
       " '.\\\\Images\\\\152.921598291.png',\n",
       " '.\\\\Images\\\\152.971598291.png',\n",
       " '.\\\\Images\\\\153.021598292.png',\n",
       " '.\\\\Images\\\\153.071598293.png',\n",
       " '.\\\\Images\\\\153.121598294.png',\n",
       " '.\\\\Images\\\\153.171598294.png',\n",
       " '.\\\\Images\\\\153.221598295.png',\n",
       " '.\\\\Images\\\\153.271598296.png',\n",
       " '.\\\\Images\\\\153.321598296.png',\n",
       " '.\\\\Images\\\\153.371598297.png',\n",
       " '.\\\\Images\\\\153.421598298.png',\n",
       " '.\\\\Images\\\\153.471598299.png',\n",
       " '.\\\\Images\\\\153.5715983.png',\n",
       " '.\\\\Images\\\\153.621598301.png',\n",
       " '.\\\\Images\\\\153.671598302.png',\n",
       " '.\\\\Images\\\\153.721598302.png',\n",
       " '.\\\\Images\\\\153.771598303.png',\n",
       " '.\\\\Images\\\\153.821598304.png',\n",
       " '.\\\\Images\\\\153.871598305.png',\n",
       " '.\\\\Images\\\\153.921598305.png',\n",
       " '.\\\\Images\\\\153.971598306.png',\n",
       " '.\\\\Images\\\\154.021598307.png',\n",
       " '.\\\\Images\\\\154.071598308.png',\n",
       " '.\\\\Images\\\\154.121598308.png',\n",
       " '.\\\\Images\\\\154.171598309.png',\n",
       " '.\\\\Images\\\\154.22159831.png',\n",
       " '.\\\\Images\\\\154.271598311.png',\n",
       " '.\\\\Images\\\\154.321598311.png',\n",
       " '.\\\\Images\\\\154.371598312.png',\n",
       " '.\\\\Images\\\\154.421598313.png',\n",
       " '.\\\\Images\\\\154.471598314.png',\n",
       " '.\\\\Images\\\\154.521598314.png',\n",
       " '.\\\\Images\\\\154.571598315.png',\n",
       " '.\\\\Images\\\\154.621598316.png',\n",
       " '.\\\\Images\\\\154.721598317.png',\n",
       " '.\\\\Images\\\\154.771598318.png',\n",
       " '.\\\\Images\\\\154.821598319.png',\n",
       " '.\\\\Images\\\\154.87159832.png',\n",
       " '.\\\\Images\\\\154.92159832.png',\n",
       " '.\\\\Images\\\\154.971598321.png',\n",
       " '.\\\\Images\\\\155.021598322.png',\n",
       " '.\\\\Images\\\\155.071598323.png',\n",
       " '.\\\\Images\\\\155.121598323.png',\n",
       " '.\\\\Images\\\\155.171598324.png',\n",
       " '.\\\\Images\\\\155.221598325.png',\n",
       " '.\\\\Images\\\\155.271598326.png',\n",
       " '.\\\\Images\\\\155.321598326.png',\n",
       " '.\\\\Images\\\\155.371598327.png',\n",
       " '.\\\\Images\\\\155.421598328.png',\n",
       " '.\\\\Images\\\\155.471598329.png',\n",
       " '.\\\\Images\\\\155.521598329.png',\n",
       " '.\\\\Images\\\\155.57159833.png',\n",
       " '.\\\\Images\\\\155.621598331.png',\n",
       " '.\\\\Images\\\\155.671598332.png',\n",
       " '.\\\\Images\\\\155.721598332.png',\n",
       " '.\\\\Images\\\\155.771598333.png',\n",
       " '.\\\\Images\\\\155.821598334.png',\n",
       " '.\\\\Images\\\\155.871598334.png',\n",
       " '.\\\\Images\\\\155.921598335.png',\n",
       " '.\\\\Images\\\\155.971598336.png',\n",
       " '.\\\\Images\\\\156.021598337.png',\n",
       " '.\\\\Images\\\\156.071598337.png',\n",
       " '.\\\\Images\\\\156.121598338.png',\n",
       " '.\\\\Images\\\\156.171598339.png',\n",
       " '.\\\\Images\\\\156.22159834.png',\n",
       " '.\\\\Images\\\\156.27159834.png',\n",
       " '.\\\\Images\\\\156.321598341.png',\n",
       " '.\\\\Images\\\\156.371598342.png',\n",
       " '.\\\\Images\\\\156.421598343.png',\n",
       " '.\\\\Images\\\\156.471598343.png',\n",
       " '.\\\\Images\\\\156.571598345.png',\n",
       " '.\\\\Images\\\\156.621598346.png',\n",
       " '.\\\\Images\\\\156.671598346.png',\n",
       " '.\\\\Images\\\\156.721598347.png',\n",
       " '.\\\\Images\\\\156.821598349.png',\n",
       " '.\\\\Images\\\\156.871598349.png',\n",
       " '.\\\\Images\\\\156.92159835.png',\n",
       " '.\\\\Images\\\\156.971598351.png',\n",
       " '.\\\\Images\\\\157.021598352.png',\n",
       " '.\\\\Images\\\\157.071598352.png',\n",
       " '.\\\\Images\\\\157.121598353.png',\n",
       " '.\\\\Images\\\\157.171598354.png',\n",
       " '.\\\\Images\\\\157.221598355.png',\n",
       " '.\\\\Images\\\\157.271598355.png',\n",
       " '.\\\\Images\\\\157.321598356.png',\n",
       " '.\\\\Images\\\\157.421598358.png',\n",
       " '.\\\\Images\\\\157.471598358.png',\n",
       " '.\\\\Images\\\\157.521598359.png',\n",
       " '.\\\\Images\\\\157.57159836.png',\n",
       " '.\\\\Images\\\\157.621598361.png',\n",
       " '.\\\\Images\\\\157.671598361.png',\n",
       " '.\\\\Images\\\\157.721598362.png',\n",
       " '.\\\\Images\\\\157.821598364.png',\n",
       " '.\\\\Images\\\\157.871598364.png',\n",
       " '.\\\\Images\\\\157.921598365.png',\n",
       " '.\\\\Images\\\\157.971598366.png',\n",
       " '.\\\\Images\\\\158.021598367.png',\n",
       " '.\\\\Images\\\\158.071598367.png',\n",
       " '.\\\\Images\\\\158.121598368.png',\n",
       " '.\\\\Images\\\\158.171598369.png',\n",
       " '.\\\\Images\\\\158.22159837.png',\n",
       " '.\\\\Images\\\\158.27159837.png',\n",
       " '.\\\\Images\\\\158.321598371.png',\n",
       " '.\\\\Images\\\\158.371598372.png',\n",
       " '.\\\\Images\\\\158.421598372.png',\n",
       " '.\\\\Images\\\\158.471598373.png',\n",
       " '.\\\\Images\\\\158.521598374.png',\n",
       " '.\\\\Images\\\\158.571598375.png',\n",
       " '.\\\\Images\\\\158.621598375.png',\n",
       " '.\\\\Images\\\\158.671598376.png',\n",
       " '.\\\\Images\\\\158.721598377.png',\n",
       " '.\\\\Images\\\\158.771598378.png',\n",
       " '.\\\\Images\\\\158.871598379.png',\n",
       " '.\\\\Images\\\\158.92159838.png',\n",
       " '.\\\\Images\\\\158.971598381.png',\n",
       " '.\\\\Images\\\\159.021598381.png',\n",
       " '.\\\\Images\\\\159.071598382.png',\n",
       " '.\\\\Images\\\\159.121598383.png',\n",
       " '.\\\\Images\\\\159.171598384.png',\n",
       " '.\\\\Images\\\\159.221598384.png',\n",
       " '.\\\\Images\\\\159.271598385.png',\n",
       " '.\\\\Images\\\\159.371598387.png',\n",
       " '.\\\\Images\\\\159.421598387.png',\n",
       " '.\\\\Images\\\\159.471598388.png',\n",
       " '.\\\\Images\\\\159.521598389.png',\n",
       " '.\\\\Images\\\\159.57159839.png',\n",
       " '.\\\\Images\\\\159.62159839.png',\n",
       " '.\\\\Images\\\\159.721598392.png',\n",
       " '.\\\\Images\\\\159.771598393.png',\n",
       " '.\\\\Images\\\\159.821598393.png',\n",
       " '.\\\\Images\\\\159.871598394.png',\n",
       " '.\\\\Images\\\\159.921598395.png',\n",
       " '.\\\\Images\\\\182.671598734.png',\n",
       " '.\\\\Images\\\\182.721598735.png',\n",
       " '.\\\\Images\\\\182.771598735.png',\n",
       " '.\\\\Images\\\\182.821598736.png',\n",
       " '.\\\\Images\\\\182.871598737.png',\n",
       " '.\\\\Images\\\\182.921598738.png',\n",
       " '.\\\\Images\\\\182.971598738.png',\n",
       " '.\\\\Images\\\\183.021598739.png',\n",
       " '.\\\\Images\\\\183.07159874.png',\n",
       " '.\\\\Images\\\\183.121598741.png',\n",
       " '.\\\\Images\\\\183.171598741.png',\n",
       " '.\\\\Images\\\\183.221598742.png',\n",
       " '.\\\\Images\\\\183.321598744.png',\n",
       " '.\\\\Images\\\\183.371598744.png',\n",
       " '.\\\\Images\\\\183.421598745.png',\n",
       " '.\\\\Images\\\\183.471598746.png',\n",
       " '.\\\\Images\\\\183.521598747.png',\n",
       " '.\\\\Images\\\\183.571598747.png',\n",
       " '.\\\\Images\\\\183.621598748.png',\n",
       " '.\\\\Images\\\\183.671598749.png',\n",
       " '.\\\\Images\\\\183.721598749.png',\n",
       " '.\\\\Images\\\\183.77159875.png',\n",
       " '.\\\\Images\\\\183.821598751.png',\n",
       " '.\\\\Images\\\\183.871598752.png',\n",
       " '.\\\\Images\\\\183.921598752.png',\n",
       " '.\\\\Images\\\\183.971598753.png',\n",
       " '.\\\\Images\\\\184.021598754.png',\n",
       " '.\\\\Images\\\\184.071598755.png',\n",
       " '.\\\\Images\\\\184.121598755.png',\n",
       " '.\\\\Images\\\\184.171598756.png',\n",
       " '.\\\\Images\\\\184.221598757.png',\n",
       " '.\\\\Images\\\\184.271598758.png',\n",
       " '.\\\\Images\\\\184.321598758.png',\n",
       " '.\\\\Images\\\\184.371598759.png',\n",
       " '.\\\\Images\\\\184.42159876.png',\n",
       " '.\\\\Images\\\\184.471598761.png',\n",
       " '.\\\\Images\\\\184.521598761.png',\n",
       " '.\\\\Images\\\\184.571598762.png',\n",
       " '.\\\\Images\\\\184.671598764.png',\n",
       " '.\\\\Images\\\\184.721598764.png',\n",
       " '.\\\\Images\\\\184.771598765.png',\n",
       " '.\\\\Images\\\\184.821598766.png',\n",
       " '.\\\\Images\\\\184.871598767.png',\n",
       " '.\\\\Images\\\\184.921598767.png',\n",
       " '.\\\\Images\\\\184.971598768.png',\n",
       " '.\\\\Images\\\\185.07159877.png',\n",
       " '.\\\\Images\\\\185.171598771.png',\n",
       " '.\\\\Images\\\\185.271598773.png',\n",
       " '.\\\\Images\\\\185.321598773.png',\n",
       " '.\\\\Images\\\\185.371598774.png',\n",
       " '.\\\\Images\\\\185.421598775.png',\n",
       " '.\\\\Images\\\\185.471598776.png',\n",
       " '.\\\\Images\\\\185.521598776.png',\n",
       " '.\\\\Images\\\\185.571598777.png',\n",
       " '.\\\\Images\\\\185.621598778.png',\n",
       " '.\\\\Images\\\\185.671598779.png',\n",
       " '.\\\\Images\\\\185.721598779.png',\n",
       " '.\\\\Images\\\\185.77159878.png',\n",
       " '.\\\\Images\\\\185.821598781.png',\n",
       " '.\\\\Images\\\\185.921598782.png',\n",
       " '.\\\\Images\\\\185.971598783.png',\n",
       " '.\\\\Images\\\\186.021598784.png',\n",
       " '.\\\\Images\\\\186.071598784.png',\n",
       " '.\\\\Images\\\\186.121598785.png',\n",
       " '.\\\\Images\\\\186.171598786.png',\n",
       " '.\\\\Images\\\\186.221598787.png',\n",
       " '.\\\\Images\\\\186.271598787.png',\n",
       " '.\\\\Images\\\\186.321598788.png',\n",
       " '.\\\\Images\\\\186.371598789.png',\n",
       " '.\\\\Images\\\\186.42159879.png',\n",
       " '.\\\\Images\\\\186.47159879.png',\n",
       " '.\\\\Images\\\\186.521598791.png',\n",
       " '.\\\\Images\\\\186.571598792.png',\n",
       " '.\\\\Images\\\\186.621598793.png',\n",
       " '.\\\\Images\\\\186.671598793.png',\n",
       " '.\\\\Images\\\\186.721598794.png',\n",
       " '.\\\\Images\\\\186.771598795.png',\n",
       " '.\\\\Images\\\\186.821598796.png',\n",
       " '.\\\\Images\\\\186.871598796.png',\n",
       " '.\\\\Images\\\\186.921598797.png',\n",
       " '.\\\\Images\\\\186.971598798.png',\n",
       " '.\\\\Images\\\\187.021598799.png',\n",
       " '.\\\\Images\\\\187.071598799.png',\n",
       " '.\\\\Images\\\\187.1215988.png',\n",
       " '.\\\\Images\\\\187.171598801.png',\n",
       " '.\\\\Images\\\\187.221598802.png',\n",
       " '.\\\\Images\\\\187.271598802.png',\n",
       " '.\\\\Images\\\\187.321598803.png',\n",
       " '.\\\\Images\\\\187.371598804.png',\n",
       " '.\\\\Images\\\\187.421598805.png',\n",
       " '.\\\\Images\\\\187.471598805.png',\n",
       " '.\\\\Images\\\\187.521598806.png',\n",
       " '.\\\\Images\\\\187.571598807.png',\n",
       " '.\\\\Images\\\\187.621598808.png',\n",
       " '.\\\\Images\\\\187.671598808.png',\n",
       " '.\\\\Images\\\\187.721598809.png',\n",
       " '.\\\\Images\\\\187.77159881.png',\n",
       " '.\\\\Images\\\\187.821598811.png',\n",
       " '.\\\\Images\\\\187.871598811.png',\n",
       " '.\\\\Images\\\\187.921598812.png',\n",
       " '.\\\\Images\\\\187.971598813.png',\n",
       " '.\\\\Images\\\\188.021598814.png',\n",
       " '.\\\\Images\\\\188.071598814.png',\n",
       " '.\\\\Images\\\\188.121598815.png',\n",
       " '.\\\\Images\\\\188.171598816.png',\n",
       " '.\\\\Images\\\\188.221598817.png',\n",
       " '.\\\\Images\\\\188.271598817.png',\n",
       " '.\\\\Images\\\\188.321598818.png',\n",
       " '.\\\\Images\\\\188.371598819.png',\n",
       " '.\\\\Images\\\\188.42159882.png',\n",
       " '.\\\\Images\\\\188.47159882.png',\n",
       " '.\\\\Images\\\\188.521598821.png',\n",
       " '.\\\\Images\\\\188.571598822.png',\n",
       " '.\\\\Images\\\\188.621598822.png',\n",
       " '.\\\\Images\\\\188.671598823.png',\n",
       " '.\\\\Images\\\\188.721598824.png',\n",
       " '.\\\\Images\\\\188.771598825.png',\n",
       " '.\\\\Images\\\\188.821598825.png',\n",
       " '.\\\\Images\\\\188.871598826.png',\n",
       " '.\\\\Images\\\\188.921598827.png',\n",
       " '.\\\\Images\\\\188.971598828.png',\n",
       " '.\\\\Images\\\\189.021598828.png',\n",
       " '.\\\\Images\\\\189.071598829.png',\n",
       " '.\\\\Images\\\\189.171598831.png',\n",
       " '.\\\\Images\\\\189.221598831.png',\n",
       " '.\\\\Images\\\\189.271598832.png',\n",
       " '.\\\\Images\\\\189.321598833.png',\n",
       " '.\\\\Images\\\\189.371598834.png',\n",
       " '.\\\\Images\\\\189.421598834.png',\n",
       " '.\\\\Images\\\\189.471598835.png',\n",
       " '.\\\\Images\\\\189.521598836.png',\n",
       " '.\\\\Images\\\\189.571598837.png',\n",
       " '.\\\\Images\\\\189.621598837.png',\n",
       " '.\\\\Images\\\\189.671598838.png',\n",
       " '.\\\\Images\\\\189.721598839.png',\n",
       " '.\\\\Images\\\\189.77159884.png',\n",
       " '.\\\\Images\\\\189.82159884.png',\n",
       " '.\\\\Images\\\\189.871598841.png',\n",
       " '.\\\\Images\\\\189.921598842.png',\n",
       " '.\\\\Images\\\\189.971598843.png',\n",
       " '.\\\\Images\\\\190.021598843.png',\n",
       " '.\\\\Images\\\\190.071598844.png',\n",
       " '.\\\\Images\\\\190.121598845.png',\n",
       " '.\\\\Images\\\\190.171598846.png',\n",
       " '.\\\\Images\\\\190.221598846.png',\n",
       " '.\\\\Images\\\\190.271598847.png',\n",
       " '.\\\\Images\\\\190.321598848.png',\n",
       " '.\\\\Images\\\\190.371598849.png',\n",
       " '.\\\\Images\\\\190.421598849.png',\n",
       " '.\\\\Images\\\\190.521598851.png',\n",
       " '.\\\\Images\\\\190.571598852.png',\n",
       " '.\\\\Images\\\\190.621598852.png',\n",
       " '.\\\\Images\\\\190.671598853.png',\n",
       " '.\\\\Images\\\\190.721598854.png',\n",
       " '.\\\\Images\\\\190.771598855.png',\n",
       " '.\\\\Images\\\\190.871598856.png',\n",
       " '.\\\\Images\\\\190.971598858.png',\n",
       " '.\\\\Images\\\\191.021598858.png',\n",
       " '.\\\\Images\\\\191.071598859.png',\n",
       " '.\\\\Images\\\\191.12159886.png',\n",
       " '.\\\\Images\\\\191.17159886.png',\n",
       " '.\\\\Images\\\\191.221598861.png',\n",
       " '.\\\\Images\\\\191.271598862.png',\n",
       " '.\\\\Images\\\\191.321598863.png',\n",
       " '.\\\\Images\\\\191.371598863.png',\n",
       " '.\\\\Images\\\\191.421598864.png',\n",
       " '.\\\\Images\\\\191.471598865.png',\n",
       " '.\\\\Images\\\\191.521598866.png',\n",
       " '.\\\\Images\\\\191.571598866.png',\n",
       " '.\\\\Images\\\\191.621598867.png',\n",
       " '.\\\\Images\\\\191.671598868.png',\n",
       " '.\\\\Images\\\\191.721598869.png',\n",
       " '.\\\\Images\\\\191.771598869.png',\n",
       " '.\\\\Images\\\\191.82159887.png',\n",
       " '.\\\\Images\\\\191.871598871.png',\n",
       " '.\\\\Images\\\\191.921598872.png',\n",
       " '.\\\\Images\\\\191.971598872.png',\n",
       " '.\\\\Images\\\\192.021598873.png',\n",
       " '.\\\\Images\\\\192.071598874.png',\n",
       " '.\\\\Images\\\\192.121598875.png',\n",
       " '.\\\\Images\\\\192.171598875.png',\n",
       " '.\\\\Images\\\\192.221598876.png',\n",
       " '.\\\\Images\\\\192.271598877.png',\n",
       " '.\\\\Images\\\\192.321598878.png',\n",
       " '.\\\\Images\\\\192.371598878.png',\n",
       " '.\\\\Images\\\\192.421598879.png',\n",
       " '.\\\\Images\\\\192.47159888.png',\n",
       " '.\\\\Images\\\\192.521598881.png',\n",
       " '.\\\\Images\\\\192.571598881.png',\n",
       " '.\\\\Images\\\\192.621598882.png',\n",
       " '.\\\\Images\\\\192.671598883.png',\n",
       " '.\\\\Images\\\\192.721598884.png',\n",
       " '.\\\\Images\\\\192.771598884.png',\n",
       " '.\\\\Images\\\\192.821598885.png',\n",
       " '.\\\\Images\\\\192.871598886.png',\n",
       " '.\\\\Images\\\\192.921598887.png',\n",
       " '.\\\\Images\\\\192.971598887.png',\n",
       " '.\\\\Images\\\\193.021598888.png',\n",
       " '.\\\\Images\\\\193.071598889.png',\n",
       " '.\\\\Images\\\\193.12159889.png',\n",
       " '.\\\\Images\\\\193.17159889.png',\n",
       " '.\\\\Images\\\\193.221598891.png',\n",
       " '.\\\\Images\\\\193.271598892.png',\n",
       " '.\\\\Images\\\\193.321598893.png',\n",
       " '.\\\\Images\\\\193.371598893.png',\n",
       " '.\\\\Images\\\\193.421598894.png',\n",
       " '.\\\\Images\\\\193.521598896.png',\n",
       " '.\\\\Images\\\\193.571598896.png',\n",
       " '.\\\\Images\\\\193.621598897.png',\n",
       " '.\\\\Images\\\\193.671598898.png',\n",
       " '.\\\\Images\\\\193.721598898.png',\n",
       " '.\\\\Images\\\\193.771598899.png',\n",
       " '.\\\\Images\\\\193.8215989.png',\n",
       " '.\\\\Images\\\\193.871598901.png',\n",
       " '.\\\\Images\\\\193.921598901.png',\n",
       " '.\\\\Images\\\\193.971598902.png',\n",
       " '.\\\\Images\\\\194.021598903.png',\n",
       " '.\\\\Images\\\\194.071598904.png',\n",
       " '.\\\\Images\\\\194.121598904.png',\n",
       " '.\\\\Images\\\\194.171598905.png',\n",
       " '.\\\\Images\\\\194.221598906.png',\n",
       " '.\\\\Images\\\\194.271598907.png',\n",
       " '.\\\\Images\\\\194.321598907.png',\n",
       " '.\\\\Images\\\\194.371598908.png',\n",
       " '.\\\\Images\\\\194.421598909.png',\n",
       " '.\\\\Images\\\\194.47159891.png',\n",
       " '.\\\\Images\\\\194.52159891.png',\n",
       " '.\\\\Images\\\\194.571598911.png',\n",
       " '.\\\\Images\\\\194.621598912.png',\n",
       " '.\\\\Images\\\\194.671598913.png',\n",
       " '.\\\\Images\\\\194.721598913.png',\n",
       " '.\\\\Images\\\\194.771598914.png',\n",
       " '.\\\\Images\\\\194.821598915.png',\n",
       " '.\\\\Images\\\\194.871598916.png',\n",
       " '.\\\\Images\\\\194.921598916.png',\n",
       " '.\\\\Images\\\\194.971598917.png',\n",
       " '.\\\\Images\\\\195.021598918.png',\n",
       " '.\\\\Images\\\\195.071598919.png',\n",
       " '.\\\\Images\\\\195.121598919.png',\n",
       " '.\\\\Images\\\\195.17159892.png',\n",
       " '.\\\\Images\\\\195.221598921.png',\n",
       " '.\\\\Images\\\\195.271598922.png',\n",
       " '.\\\\Images\\\\195.321598922.png',\n",
       " '.\\\\Images\\\\195.371598923.png',\n",
       " '.\\\\Images\\\\195.421598924.png',\n",
       " '.\\\\Images\\\\195.471598925.png',\n",
       " '.\\\\Images\\\\195.521598925.png',\n",
       " '.\\\\Images\\\\195.571598926.png',\n",
       " '.\\\\Images\\\\195.621598927.png',\n",
       " '.\\\\Images\\\\195.671598928.png',\n",
       " '.\\\\Images\\\\195.721598928.png',\n",
       " '.\\\\Images\\\\195.771598929.png',\n",
       " '.\\\\Images\\\\195.82159893.png',\n",
       " '.\\\\Images\\\\195.871598931.png',\n",
       " '.\\\\Images\\\\195.921598931.png',\n",
       " '.\\\\Images\\\\195.971598932.png',\n",
       " '.\\\\Images\\\\196.021598933.png',\n",
       " '.\\\\Images\\\\196.071598934.png',\n",
       " '.\\\\Images\\\\196.121598934.png',\n",
       " '.\\\\Images\\\\196.171598935.png',\n",
       " '.\\\\Images\\\\196.221598936.png',\n",
       " '.\\\\Images\\\\196.271598936.png',\n",
       " '.\\\\Images\\\\196.321598937.png',\n",
       " '.\\\\Images\\\\196.371598938.png',\n",
       " '.\\\\Images\\\\196.421598939.png',\n",
       " '.\\\\Images\\\\196.471598939.png',\n",
       " '.\\\\Images\\\\196.52159894.png',\n",
       " '.\\\\Images\\\\196.571598941.png',\n",
       " '.\\\\Images\\\\196.621598942.png',\n",
       " ...]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file_path = os.path.join(PATH,'Images')\n",
    "frames = os.listdir(file_path)\n",
    "func = lambda f : int(f.split('.')[0])\n",
    "frames = sorted(frames, key=func)\n",
    "frames = list(map(lambda x : os.path.join(file_path,x),frames))\n",
    "frames"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ca816588",
   "metadata": {},
   "outputs": [],
   "source": [
    "class LiveGraphPlot:\n",
    "    def __init__(self, graph_width=800, graph_height=400, num_points=100):\n",
    "        self.graph_width = graph_width\n",
    "        self.graph_height = graph_height\n",
    "        self.num_points = num_points\n",
    "        self.data = []\n",
    "        self.data2 = []\n",
    "\n",
    "    def plot_graph(self, value1,value2):\n",
    "        self.data.append(value1)\n",
    "        self.data = self.data[-self.num_points:]  # Keep only the latest data points\n",
    "\n",
    "        self.data2.append(value2)\n",
    "        self.data2 = self.data2[-self.num_points:]  # Keep only the latest data points\n",
    "        \n",
    "        plt.clf()  # Clear the figure\n",
    "        plt.plot(range(len(self.data)), self.data)\n",
    "        plt.plot(range(len(self.data2)), self.data2)\n",
    "        plt.xlabel('Time')\n",
    "        plt.ylabel('Value')\n",
    "        plt.title('Live Graph')\n",
    "        plt.grid(False)\n",
    "\n",
    "        # Convert the plot to an image\n",
    "        fig = plt.gcf()\n",
    "        fig.canvas.draw()\n",
    "        plot_img = np.array(fig.canvas.renderer.buffer_rgba())\n",
    "            \n",
    "        # Convert RGBA to RGB\n",
    "        plot_img = cv2.cvtColor(plot_img, cv2.COLOR_RGBA2RGB)\n",
    "\n",
    "        # Resize the plot image to fit the specified graph width and height\n",
    "        plot_img = cv2.resize(plot_img, (self.graph_width, self.graph_height))\n",
    "\n",
    "        return plot_img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3f4424ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>velocity</th>\n",
       "      <th>lin_acc_x</th>\n",
       "      <th>lin_acc_y</th>\n",
       "      <th>lin_acc_z</th>\n",
       "      <th>ang_acc_x</th>\n",
       "      <th>ang_acc_y</th>\n",
       "      <th>ang_acc_z</th>\n",
       "      <th>orient_x</th>\n",
       "      <th>orient_y</th>\n",
       "      <th>orient_z</th>\n",
       "      <th>throttle</th>\n",
       "      <th>steer</th>\n",
       "      <th>brake</th>\n",
       "      <th>pic_file_name</th>\n",
       "      <th>Turn_signal</th>\n",
       "      <th>Turning</th>\n",
       "      <th>Traffic</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.002549</td>\n",
       "      <td>-0.000061</td>\n",
       "      <td>-1.482325e-06</td>\n",
       "      <td>-0.050986</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.000061</td>\n",
       "      <td>0.001100</td>\n",
       "      <td>-0.019974</td>\n",
       "      <td>0.85</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>92.071597384.png</td>\n",
       "      <td>Right</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.000320</td>\n",
       "      <td>-0.000006</td>\n",
       "      <td>8.497118e-07</td>\n",
       "      <td>0.044582</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.000061</td>\n",
       "      <td>0.000888</td>\n",
       "      <td>-0.019974</td>\n",
       "      <td>0.85</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>92.121597385.png</td>\n",
       "      <td>Right</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.098370</td>\n",
       "      <td>1.967432</td>\n",
       "      <td>-6.872174e-04</td>\n",
       "      <td>0.018499</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.000061</td>\n",
       "      <td>-0.002329</td>\n",
       "      <td>-0.019948</td>\n",
       "      <td>0.85</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>92.171597385.png</td>\n",
       "      <td>Right</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.258910</td>\n",
       "      <td>3.210628</td>\n",
       "      <td>-4.294041e-02</td>\n",
       "      <td>0.005604</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.000275</td>\n",
       "      <td>-0.007984</td>\n",
       "      <td>-0.020123</td>\n",
       "      <td>0.85</td>\n",
       "      <td>0.000616</td>\n",
       "      <td>0.0</td>\n",
       "      <td>92.221597386.png</td>\n",
       "      <td>Right</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.476104</td>\n",
       "      <td>4.344050</td>\n",
       "      <td>2.843620e-02</td>\n",
       "      <td>-0.000236</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.000183</td>\n",
       "      <td>-0.017294</td>\n",
       "      <td>0.000702</td>\n",
       "      <td>0.85</td>\n",
       "      <td>0.000440</td>\n",
       "      <td>0.0</td>\n",
       "      <td>92.271597387.png</td>\n",
       "      <td>Right</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8663</th>\n",
       "      <td>5.898657</td>\n",
       "      <td>8.968496</td>\n",
       "      <td>-4.654010e-03</td>\n",
       "      <td>-0.000059</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.000061</td>\n",
       "      <td>0.039000</td>\n",
       "      <td>179.970016</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>979.571610609.png</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8664</th>\n",
       "      <td>4.557831</td>\n",
       "      <td>26.816587</td>\n",
       "      <td>-1.402281e-02</td>\n",
       "      <td>-0.124117</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.000061</td>\n",
       "      <td>0.087556</td>\n",
       "      <td>179.969940</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>979.621610609.png</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8665</th>\n",
       "      <td>3.208875</td>\n",
       "      <td>26.979061</td>\n",
       "      <td>-6.151032e-03</td>\n",
       "      <td>0.074907</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.000122</td>\n",
       "      <td>0.139438</td>\n",
       "      <td>179.969376</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000616</td>\n",
       "      <td>1.0</td>\n",
       "      <td>979.67161061.png</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8666</th>\n",
       "      <td>1.868220</td>\n",
       "      <td>26.813076</td>\n",
       "      <td>-2.071997e-02</td>\n",
       "      <td>0.036380</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.000092</td>\n",
       "      <td>0.186765</td>\n",
       "      <td>179.969055</td>\n",
       "      <td>0.00</td>\n",
       "      <td>-0.000176</td>\n",
       "      <td>1.0</td>\n",
       "      <td>979.721610611.png</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8667</th>\n",
       "      <td>0.542404</td>\n",
       "      <td>26.516314</td>\n",
       "      <td>-1.480668e-02</td>\n",
       "      <td>0.016012</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.000061</td>\n",
       "      <td>0.224549</td>\n",
       "      <td>179.969025</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>979.771610612.png</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8668 rows × 17 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      velocity  lin_acc_x     lin_acc_y  lin_acc_z  ang_acc_x  ang_acc_y   \n",
       "0     0.002549  -0.000061 -1.482325e-06  -0.050986          0          0  \\\n",
       "1     0.000320  -0.000006  8.497118e-07   0.044582          0          0   \n",
       "2     0.098370   1.967432 -6.872174e-04   0.018499          0          0   \n",
       "3     0.258910   3.210628 -4.294041e-02   0.005604          0          0   \n",
       "4     0.476104   4.344050  2.843620e-02  -0.000236          0          0   \n",
       "...        ...        ...           ...        ...        ...        ...   \n",
       "8663  5.898657   8.968496 -4.654010e-03  -0.000059          0          0   \n",
       "8664  4.557831  26.816587 -1.402281e-02  -0.124117          0          0   \n",
       "8665  3.208875  26.979061 -6.151032e-03   0.074907          0          0   \n",
       "8666  1.868220  26.813076 -2.071997e-02   0.036380          0          0   \n",
       "8667  0.542404  26.516314 -1.480668e-02   0.016012          0          0   \n",
       "\n",
       "      ang_acc_z  orient_x  orient_y    orient_z  throttle     steer  brake   \n",
       "0             0 -0.000061  0.001100   -0.019974      0.85  0.000000    0.0  \\\n",
       "1             0 -0.000061  0.000888   -0.019974      0.85  0.000000    0.0   \n",
       "2             0 -0.000061 -0.002329   -0.019948      0.85  0.000000    0.0   \n",
       "3             0 -0.000275 -0.007984   -0.020123      0.85  0.000616    0.0   \n",
       "4             0 -0.000183 -0.017294    0.000702      0.85  0.000440    0.0   \n",
       "...         ...       ...       ...         ...       ...       ...    ...   \n",
       "8663          0 -0.000061  0.039000  179.970016      0.00  0.000000    1.0   \n",
       "8664          0 -0.000061  0.087556  179.969940      0.00  0.000000    1.0   \n",
       "8665          0 -0.000122  0.139438  179.969376      0.00  0.000616    1.0   \n",
       "8666          0 -0.000092  0.186765  179.969055      0.00 -0.000176    1.0   \n",
       "8667          0 -0.000061  0.224549  179.969025      0.00  0.000000    1.0   \n",
       "\n",
       "          pic_file_name Turn_signal  Turning  Traffic  \n",
       "0      92.071597384.png       Right      0.0      0.0  \n",
       "1      92.121597385.png       Right      0.0      0.0  \n",
       "2      92.171597385.png       Right      0.0      0.0  \n",
       "3      92.221597386.png       Right      0.0      0.0  \n",
       "4      92.271597387.png       Right      0.0      0.0  \n",
       "...                 ...         ...      ...      ...  \n",
       "8663  979.571610609.png         NaN      NaN      NaN  \n",
       "8664  979.621610609.png         NaN      NaN      NaN  \n",
       "8665   979.67161061.png         NaN      NaN      NaN  \n",
       "8666  979.721610611.png         NaN      NaN      NaN  \n",
       "8667  979.771610612.png         NaN      NaN      NaN  \n",
       "\n",
       "[8668 rows x 17 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Open the file in write mode\n",
    "file_path = os.path.join(PATH,'turn_dir.csv')\n",
    "data = pd.read_csv(file_path)\n",
    "data.drop(data.columns[[0,1]],axis=1,inplace=True)\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b05aef03",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.LineCollection at 0x1829dcce0b0>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data['steer'].plot()\n",
    "plt.vlines(1450,-1,1,colors='g')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b288c8d0",
   "metadata": {},
   "source": [
    "# Dataloading"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5abcabf8",
   "metadata": {},
   "source": [
    "With Turning and Traffic:\n",
    "\n",
    "    Left : 1472\n",
    "    Right : 775\n",
    "    Straight : 721\n",
    "    \n",
    "With Turning and not Traffic:\n",
    "\n",
    "    Left : 178\n",
    "    Right : 372\n",
    "    Straight : 0\n",
    "    \n",
    "Without Turning and Traffic:\n",
    "\n",
    "    Length : 4693"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "182449cd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1821\n"
     ]
    }
   ],
   "source": [
    "df_majority = np.array(data[(data[\"Turn_signal\"] == \"Straight\")].steer)\n",
    "plt.plot(df_majority)\n",
    "plt.show()\n",
    "print(df_majority.shape[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ffba0f50",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "import torchvision.transforms as transforms\n",
    "\n",
    "\n",
    "class CustomDataset(Dataset):\n",
    "    def __init__(self,mode = 'train',over_sampling = True):\n",
    "        #len_frames = len(frames)\n",
    "        #n = int(0.8*len_frames)\n",
    "        \n",
    "        self.img_dir_path = os.path.join(PATH,'Images')\n",
    "        if mode == 'train':\n",
    "            self.data = data.iloc[:8000]\n",
    "            \n",
    "            #Over-sampling\n",
    "            if over_sampling == True:\n",
    "                \n",
    "                Left_Signal_population = data[(data[\"Turn_signal\"] == \"Left\")]\n",
    "                Right_Signal_population = data[(data[\"Turn_signal\"] == \"Right\")]\n",
    "                Straight_Signal_population = data[(data[\"Turn_signal\"] == \"Straight\")]\n",
    "                \n",
    "                resample_length =  max(data[(data[\"Turn_signal\"] == \"Left\")].shape[0],\n",
    "                                       data[(data[\"Turn_signal\"] == \"Right\")].shape[0],\n",
    "                                       data[(data[\"Turn_signal\"] == \"Straight\")].shape[0])\n",
    "                \n",
    "                Left_Signal_population_oversampled = resample(Left_Signal_population, n_samples=resample_length, replace=True, random_state=42)\n",
    "                Right_Signal_population_oversampled = resample(Right_Signal_population, n_samples=resample_length, replace=True, random_state=42)\n",
    "                Straight_Signal_population_oversampled = resample(Straight_Signal_population, n_samples=resample_length, replace=True, random_state=42)\n",
    "\n",
    "                self.data = pd.concat([Left_Signal_population_oversampled, \n",
    "                                       Right_Signal_population_oversampled,\n",
    "                                       Straight_Signal_population_oversampled])\n",
    "                #print(self.data.shape)\n",
    "                #print(Left_Signal_population_oversampled.shape)\n",
    "                #print(Right_Signal_population_oversampled.shape)\n",
    "                #print(Straight_Signal_population_oversampled.shape)\n",
    "                \n",
    "        else:\n",
    "            self.data = data.iloc[8000:]\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.data)\n",
    "\n",
    "    def __getitem__(self, index):\n",
    "        # Implement your logic to retrieve and preprocess the data\n",
    "        sample = self.data.iloc[index]['pic_file_name']\n",
    "        sample = os.path.join(self.img_dir_path,sample)\n",
    "        img = cv2.imread(sample)\n",
    "        #print(img.shape)\n",
    "        #img = transform(img).numpy()\n",
    "        img = cv2.resize(img, (200,88))\n",
    "        img = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)\n",
    "        \n",
    "        velocity = self.data.iloc[index]['velocity']\n",
    "        \n",
    "        if self.data.iloc[index][\"Turn_signal\"] == \"Left\":\n",
    "            command = torch.tensor([1,0,0])\n",
    "        elif self.data.iloc[index][\"Turn_signal\"] == \"Right\":\n",
    "            command = torch.tensor([0,0,1])\n",
    "        elif self.data.iloc[index][\"Turn_signal\"] == \"Straight\":\n",
    "            command = torch.tensor([0,1,0]) \n",
    "        else:\n",
    "            command = torch.tensor([0,0,0])\n",
    "        \n",
    "        throttle = self.data.iloc[index]['throttle']\n",
    "        steer = self.data.iloc[index]['steer']\n",
    "        brake = self.data.iloc[index]['brake']\n",
    "        \n",
    "        # Return the sample as a tuple or dictionary\n",
    "        return (img,velocity,command),(steer,throttle,brake)\n",
    "\n",
    "# Create an instance of your custom dataset\n",
    "train_dataset = CustomDataset('train')\n",
    "val_dataset = CustomDataset('val')\n",
    "\n",
    "# Create a data loader\n",
    "batch_size = 16\n",
    "dataloader = {'train' : DataLoader(train_dataset, batch_size=batch_size, shuffle=True),\n",
    "              'val' : DataLoader(val_dataset, batch_size=batch_size, shuffle=True)}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6ed48ed8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([16, 88, 200, 3]) torch.Size([16])\n"
     ]
    }
   ],
   "source": [
    "for index,i in enumerate(dataloader['train']):\n",
    "    print(i[0][0].shape,i[1][0].shape)\n",
    "    if index == 0:\n",
    "        break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "186dbaf6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([16, 3])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "i[0][2].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8012c38c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x182a01db0a0>]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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r+1EfN7ExudNbOPt80rj7zMn2uc1DEOtra0qKCiQ1zv0qpaEG3nxer2aNm2ape+RkZGREP+hDBefN7HxeRPbePu80vj7zIn0eU834mJiwS4AAHAVwgsAAHAVwssIBINBrV27VsFg0O5S4oLPm9j4vIltvH1eafx95vH2eftLuAW7AAAgsTHyAgAAXIXwAgAAXIXwAgAAXIXwAgAAXIXwMkwbNmxQcXGxkpOTtWTJElVWVtpdkmXKy8u1aNEipaena/Lkybriiiu0Z88eu8uKi3vuuUcej0c33XST3aVY6tChQ/rc5z6nnJwcpaSk6JxzztErr7xid1mWCIfDuv322zVjxgylpKRo1qxZuuuuu4Z1foobvPDCC/rkJz+pgoICeTwe/eY3vxnwuGEYuuOOOzRlyhSlpKSotLRU77zzjj3FxsBQn7e7u1u33nqrzjnnHKWlpamgoEDXXHONDh8+bF/BY3S639/+/u3f/k0ej0fr16+PW312IbwMw+bNm1VWVqa1a9eqqqpK8+fP17Jly1RfX293aZZ4/vnndf311+ull17S1q1b1d3drUsuuURtbW12l2apHTt26Ec/+pHOPfdcu0ux1NGjR3XBBRcoKSlJf/jDH/TWW2/pe9/7niZOnGh3aZa499579eCDD+qHP/yhdu3apXvvvVff+c539MADD9hdWky0tbVp/vz52rBhw6CPf+c739EPfvADbdy4US+//LLS0tK0bNkydXR0xLnS2Bjq87a3t6uqqkq33367qqqq9Otf/1p79uzRpz71KRsqjY3T/f6annjiCb300ksqKCiIU2U2M3BaixcvNq6//vror8PhsFFQUGCUl5fbWFX81NfXG5KM559/3u5SLNPa2mqceeaZxtatW42PfvSjxo033mh3SZa59dZbjQsvvNDuMuLm8ssvN77whS8MuO+f/umfjBUrVthUkXUkGU888UT015FIxMjPzze++93vRu87duyYEQwGjZ///Oc2VBhbH/y8g6msrDQkGfv3749PURY61ec9ePCgMXXqVOONN94wioqKjO9///txry3eGHk5ja6uLu3cuVOlpaXR+7xer0pLS7V9+3YbK4uf5uZmSVJ2drbNlVjn+uuv1+WXXz7g9zlR/e53v1NJSYn++Z//WZMnT9Z5552nhx56yO6yLPOhD31IFRUVevvttyVJf/nLX/Tiiy/qE5/4hM2VWW/v3r2qra0d8N91ZmamlixZMq6+vzwej7KysuwuxRKRSERXX321brnlFp111ll2lxM3CXcwY6w1NjYqHA4rLy9vwP15eXnavXu3TVXFTyQS0U033aQLLrhAZ599tt3lWOLxxx9XVVWVduzYYXcpcfHXv/5VDz74oMrKyvT1r39dO3bs0A033KBAIKBrr73W7vJi7rbbblNLS4vmzJkjn8+ncDisu+++WytWrLC7NMvV1tZK0qDfX+Zjiayjo0O33nqrrrrqqoQ5uPCD7r33Xvn9ft1www12lxJXhBcM6frrr9cbb7yhF1980e5SLFFTU6Mbb7xRW7duVXJyst3lxEUkElFJSYm+/e1vS5LOO+88vfHGG9q4cWNChpdf/OIXevTRR/XYY4/prLPOUnV1tW666SYVFBQk5OdFj+7ubn32s5+VYRh68MEH7S7HEjt37tT999+vqqoqeTweu8uJK6aNTiM3N1c+n091dXUD7q+rq1N+fr5NVcXH6tWr9eSTT+q5557TtGnT7C7HEjt37lR9fb3OP/98+f1++f1+Pf/88/rBD34gv9+vcDhsd4kxN2XKFM2bN2/AfXPnztWBAwdsqshat9xyi2677TZdeeWVOuecc3T11Vfrq1/9qsrLy+0uzXLmd9R4+/4yg8v+/fu1devWhB11+eMf/6j6+npNnz49+v21f/9+3XzzzSouLra7PEsRXk4jEAho4cKFqqioiN4XiURUUVGhpUuX2liZdQzD0OrVq/XEE0/o2Wef1YwZM+wuyTIXX3yxXn/9dVVXV0dvJSUlWrFihaqrq+Xz+ewuMeYuuOCCk1rf3377bRUVFdlUkbXa29vl9Q78qvP5fIpEIjZVFD8zZsxQfn7+gO+vlpYWvfzyywn7/WUGl3feeUfPPPOMcnJy7C7JMldffbVee+21Ad9fBQUFuuWWW/T000/bXZ6lmDYahrKyMl177bUqKSnR4sWLtX79erW1tWnlypV2l2aJ66+/Xo899ph++9vfKj09PTo3npmZqZSUFJuri6309PST1vKkpaUpJycnYdf4fPWrX9WHPvQhffvb39ZnP/tZVVZWatOmTdq0aZPdpVnik5/8pO6++25Nnz5dZ511ll599VXdd999+sIXvmB3aTFx/Phxvfvuu9Ff7927V9XV1crOztb06dN100036Vvf+pbOPPNMzZgxQ7fffrsKCgp0xRVX2Ff0GAz1eadMmaLPfOYzqqqq0pNPPqlwOBz9/srOzlYgELCr7FE73e/vB8NZUlKS8vPzNXv27HiXGl92tzu5xQMPPGBMnz7dCAQCxuLFi42XXnrJ7pIsI2nQ23/913/ZXVpcJHqrtGEYxv/8z/8YZ599thEMBo05c+YYmzZtsrsky7S0tBg33nijMX36dCM5OdmYOXOm8Y1vfMPo7Oy0u7SYeO655wb9//Xaa681DKOnXfr222838vLyjGAwaFx88cXGnj177C16DIb6vHv37j3l99dzzz1nd+mjcrrf3w8aL63SHsNIkG0mAQDAuMCaFwAA4CqEFwAA4CqEFwAA4CqEFwAA4CqEFwAA4CqEFwAA4CqEFwAA4CqEFwAA4CqEFwAA4CqEFwAA4CqEFwAA4CqEFwAA4Cr/P/OGI7e0dQTwAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(i[1][0])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77b883a5",
   "metadata": {},
   "source": [
    "for j in range(200):\n",
    "    cv2.imshow(\"Frame\",i[0][0][j].cpu().numpy().astype('uint8'))\n",
    "        \n",
    "    if cv2.waitKey(25) & 0xFF == ord('q'):\n",
    "            break\n",
    "        \n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ac8544a",
   "metadata": {},
   "source": [
    "# Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1bfc13bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Model Number 2\n",
    "\n",
    "from torch import nn\n",
    "from tqdm.notebook import tqdm\n",
    "\n",
    "class fc_block(nn.Module):\n",
    "    def __init__(self,in_channel,out_channel,dropout,act = True):\n",
    "        super(fc_block, self).__init__()\n",
    "        self.fc = nn.Linear(in_channel, out_channel)\n",
    "        self.bn = nn.BatchNorm1d(out_channel)\n",
    "        self.dropout = nn.Dropout(p=dropout)\n",
    "        self.relu = nn.ReLU()\n",
    "        self.act = act\n",
    "\n",
    "    def forward(self,x):\n",
    "        #print(x.shape)\n",
    "        x = self.fc(x)\n",
    "        x = self.bn(x)\n",
    "        x = self.dropout(x)\n",
    "        if self.act == True:\n",
    "            x = self.relu(x)\n",
    "        return x\n",
    "\n",
    "class cnn_block(nn.Module):\n",
    "    def __init__(self,in_channel,out_channel,kernel_size,stride,dropout):\n",
    "        super(cnn_block, self).__init__()\n",
    "        #self.cnn = nn.Conv2d(in_channel,out_channel, kernel_size=kernel_size, stride=stride, padding=0)\n",
    "        self.depthwise_conv = nn.Conv2d(in_channels=in_channel, out_channels=in_channel, kernel_size=kernel_size,stride = stride, groups=in_channel)\n",
    "        self.pointwise_conv = nn.Conv2d(in_channels=in_channel, out_channels=out_channel, kernel_size=1)\n",
    "        self.bn = nn.BatchNorm2d(out_channel)\n",
    "        self.dropout = nn.Dropout(p=dropout)\n",
    "        self.relu = nn.ReLU()\n",
    "\n",
    "    def forward(self,x):\n",
    "        #x = self.cnn(x)\n",
    "        x = self.depthwise_conv(x)\n",
    "        x = self.pointwise_conv(x)\n",
    "        x = self.bn(x)\n",
    "        x = self.dropout(x)\n",
    "        x = self.relu(x)\n",
    "        return x\n",
    "\n",
    "class branch(nn.Module):\n",
    "    def __init__(self,in_channel,out_channel,dropout):\n",
    "      super(branch,self).__init__()\n",
    "      self.fc1 = fc_block( in_channel, 256, 0.2)\n",
    "      self.fc2 = fc_block( 256, 256, 0.2)\n",
    "      self.fc3 = fc_block( 256, out_channel, 0.2,act = False)\n",
    "\n",
    "    def forward(self,x):\n",
    "        x = self.fc1(x)\n",
    "        x = self.fc2(x)\n",
    "        x = self.fc3(x)\n",
    "        return x\n",
    "\n",
    "class Lambda(nn.Module):\n",
    "    def __init__(self, lambd):\n",
    "        super(Lambda, self).__init__()\n",
    "        self.lambd = lambd\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.lambd(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b02ece46",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Model(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(Model, self).__init__()\n",
    "\n",
    "        # Image processing configuration\n",
    "\n",
    "        self.cnn_1 = cnn_block(3,32,5,2,0.5)\n",
    "        self.cnn_2 = cnn_block(32,32,3,1,0.5)\n",
    "\n",
    "        self.cnn_3 = cnn_block(32,64,3,2,0.5)\n",
    "        self.cnn_4 = cnn_block(64,64,3,1,0.5)\n",
    "\n",
    "        self.cnn_5 = cnn_block(64,128,3,2,0.5)\n",
    "        self.cnn_6 = cnn_block(128,128,3,1,0.5)\n",
    "\n",
    "        self.cnn_7 = cnn_block(128,256,3,1,0.5)\n",
    "        self.cnn_8 = cnn_block(256,256,3,1,0.5)\n",
    "\n",
    "\n",
    "        self.fc_img_1 = fc_block( 256*16*2, 512, 0.2)\n",
    "        self.fc_img_2 = fc_block( 512, 512, 0.2)\n",
    "\n",
    "        # Speed processing configuration\n",
    "        self.fc_speed_1 = fc_block( 1, 128, 0.2)\n",
    "        self.fc_speed_2 = fc_block( 128, 128, 0.2)\n",
    "\n",
    "        # Branching\n",
    "        self.fc_default_branch = branch(640+3,3,0.2)\n",
    "\n",
    "        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "        #self.device = 'cpu'\n",
    "\n",
    "\n",
    "    def forward(self, x_img, x_speed, commands):\n",
    "\n",
    "        #print(commands)\n",
    "        x_img = x_img/255 - 0.5\n",
    "        # Image processing layers\n",
    "        #print(x_img.shape)\n",
    "        x_img = self.cnn_1(x_img)\n",
    "        #print(x_img.shape)\n",
    "        x_img = self.cnn_2(x_img)\n",
    "        #print(x_img.shape)\n",
    "        x_img = self.cnn_3(x_img)\n",
    "        #print(x_img.shape)\n",
    "        x_img = self.cnn_4(x_img)\n",
    "        #print(x_img.shape)\n",
    "        x_img = self.cnn_5(x_img)\n",
    "        #print(x_img.shape)\n",
    "        x_img = self.cnn_6(x_img)\n",
    "        #print(x_img.shape)\n",
    "        x_img = self.cnn_7(x_img)\n",
    "        #print(x_img.shape)\n",
    "        x_img = self.cnn_8(x_img)\n",
    "        #print(x_img.shape)\n",
    "        \n",
    "        x_img = x_img.reshape(-1, 256*16*2)\n",
    "        x_img = self.fc_img_1(x_img)\n",
    "        x_img = self.fc_img_2(x_img)\n",
    "\n",
    "\n",
    "        # Speed Processing Layers\n",
    "        x_speed = self.fc_speed_1(x_speed)\n",
    "        x_speed = self.fc_speed_2(x_speed)\n",
    "\n",
    "        # Fusion \n",
    "        x_joint = torch.cat([x_img,x_speed,commands],axis = 1)\n",
    "\n",
    "        branch_output = self.fc_default_branch(x_joint)\n",
    "        return branch_output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "5712e0f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>velocity</th>\n",
       "      <th>lin_acc_x</th>\n",
       "      <th>lin_acc_y</th>\n",
       "      <th>lin_acc_z</th>\n",
       "      <th>ang_acc_x</th>\n",
       "      <th>ang_acc_y</th>\n",
       "      <th>ang_acc_z</th>\n",
       "      <th>orient_x</th>\n",
       "      <th>orient_y</th>\n",
       "      <th>orient_z</th>\n",
       "      <th>throttle</th>\n",
       "      <th>steer</th>\n",
       "      <th>brake</th>\n",
       "      <th>pic_file_name</th>\n",
       "      <th>Turn_signal</th>\n",
       "      <th>Turning</th>\n",
       "      <th>Traffic</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.002549</td>\n",
       "      <td>-0.000061</td>\n",
       "      <td>-1.482325e-06</td>\n",
       "      <td>-0.050986</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.000061</td>\n",
       "      <td>0.001100</td>\n",
       "      <td>-0.019974</td>\n",
       "      <td>0.85</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>92.071597384.png</td>\n",
       "      <td>Right</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.000320</td>\n",
       "      <td>-0.000006</td>\n",
       "      <td>8.497118e-07</td>\n",
       "      <td>0.044582</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.000061</td>\n",
       "      <td>0.000888</td>\n",
       "      <td>-0.019974</td>\n",
       "      <td>0.85</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>92.121597385.png</td>\n",
       "      <td>Right</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.098370</td>\n",
       "      <td>1.967432</td>\n",
       "      <td>-6.872174e-04</td>\n",
       "      <td>0.018499</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.000061</td>\n",
       "      <td>-0.002329</td>\n",
       "      <td>-0.019948</td>\n",
       "      <td>0.85</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>92.171597385.png</td>\n",
       "      <td>Right</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.258910</td>\n",
       "      <td>3.210628</td>\n",
       "      <td>-4.294041e-02</td>\n",
       "      <td>0.005604</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.000275</td>\n",
       "      <td>-0.007984</td>\n",
       "      <td>-0.020123</td>\n",
       "      <td>0.85</td>\n",
       "      <td>0.000616</td>\n",
       "      <td>0.0</td>\n",
       "      <td>92.221597386.png</td>\n",
       "      <td>Right</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.476104</td>\n",
       "      <td>4.344050</td>\n",
       "      <td>2.843620e-02</td>\n",
       "      <td>-0.000236</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.000183</td>\n",
       "      <td>-0.017294</td>\n",
       "      <td>0.000702</td>\n",
       "      <td>0.85</td>\n",
       "      <td>0.000440</td>\n",
       "      <td>0.0</td>\n",
       "      <td>92.271597387.png</td>\n",
       "      <td>Right</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8663</th>\n",
       "      <td>5.898657</td>\n",
       "      <td>8.968496</td>\n",
       "      <td>-4.654010e-03</td>\n",
       "      <td>-0.000059</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.000061</td>\n",
       "      <td>0.039000</td>\n",
       "      <td>179.970016</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>979.571610609.png</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8664</th>\n",
       "      <td>4.557831</td>\n",
       "      <td>26.816587</td>\n",
       "      <td>-1.402281e-02</td>\n",
       "      <td>-0.124117</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.000061</td>\n",
       "      <td>0.087556</td>\n",
       "      <td>179.969940</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>979.621610609.png</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8665</th>\n",
       "      <td>3.208875</td>\n",
       "      <td>26.979061</td>\n",
       "      <td>-6.151032e-03</td>\n",
       "      <td>0.074907</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.000122</td>\n",
       "      <td>0.139438</td>\n",
       "      <td>179.969376</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000616</td>\n",
       "      <td>1.0</td>\n",
       "      <td>979.67161061.png</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8666</th>\n",
       "      <td>1.868220</td>\n",
       "      <td>26.813076</td>\n",
       "      <td>-2.071997e-02</td>\n",
       "      <td>0.036380</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.000092</td>\n",
       "      <td>0.186765</td>\n",
       "      <td>179.969055</td>\n",
       "      <td>0.00</td>\n",
       "      <td>-0.000176</td>\n",
       "      <td>1.0</td>\n",
       "      <td>979.721610611.png</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8667</th>\n",
       "      <td>0.542404</td>\n",
       "      <td>26.516314</td>\n",
       "      <td>-1.480668e-02</td>\n",
       "      <td>0.016012</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.000061</td>\n",
       "      <td>0.224549</td>\n",
       "      <td>179.969025</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>979.771610612.png</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8668 rows × 17 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      velocity  lin_acc_x     lin_acc_y  lin_acc_z  ang_acc_x  ang_acc_y   \n",
       "0     0.002549  -0.000061 -1.482325e-06  -0.050986          0          0  \\\n",
       "1     0.000320  -0.000006  8.497118e-07   0.044582          0          0   \n",
       "2     0.098370   1.967432 -6.872174e-04   0.018499          0          0   \n",
       "3     0.258910   3.210628 -4.294041e-02   0.005604          0          0   \n",
       "4     0.476104   4.344050  2.843620e-02  -0.000236          0          0   \n",
       "...        ...        ...           ...        ...        ...        ...   \n",
       "8663  5.898657   8.968496 -4.654010e-03  -0.000059          0          0   \n",
       "8664  4.557831  26.816587 -1.402281e-02  -0.124117          0          0   \n",
       "8665  3.208875  26.979061 -6.151032e-03   0.074907          0          0   \n",
       "8666  1.868220  26.813076 -2.071997e-02   0.036380          0          0   \n",
       "8667  0.542404  26.516314 -1.480668e-02   0.016012          0          0   \n",
       "\n",
       "      ang_acc_z  orient_x  orient_y    orient_z  throttle     steer  brake   \n",
       "0             0 -0.000061  0.001100   -0.019974      0.85  0.000000    0.0  \\\n",
       "1             0 -0.000061  0.000888   -0.019974      0.85  0.000000    0.0   \n",
       "2             0 -0.000061 -0.002329   -0.019948      0.85  0.000000    0.0   \n",
       "3             0 -0.000275 -0.007984   -0.020123      0.85  0.000616    0.0   \n",
       "4             0 -0.000183 -0.017294    0.000702      0.85  0.000440    0.0   \n",
       "...         ...       ...       ...         ...       ...       ...    ...   \n",
       "8663          0 -0.000061  0.039000  179.970016      0.00  0.000000    1.0   \n",
       "8664          0 -0.000061  0.087556  179.969940      0.00  0.000000    1.0   \n",
       "8665          0 -0.000122  0.139438  179.969376      0.00  0.000616    1.0   \n",
       "8666          0 -0.000092  0.186765  179.969055      0.00 -0.000176    1.0   \n",
       "8667          0 -0.000061  0.224549  179.969025      0.00  0.000000    1.0   \n",
       "\n",
       "          pic_file_name Turn_signal  Turning  Traffic  \n",
       "0      92.071597384.png       Right      0.0      0.0  \n",
       "1      92.121597385.png       Right      0.0      0.0  \n",
       "2      92.171597385.png       Right      0.0      0.0  \n",
       "3      92.221597386.png       Right      0.0      0.0  \n",
       "4      92.271597387.png       Right      0.0      0.0  \n",
       "...                 ...         ...      ...      ...  \n",
       "8663  979.571610609.png         NaN      NaN      NaN  \n",
       "8664  979.621610609.png         NaN      NaN      NaN  \n",
       "8665   979.67161061.png         NaN      NaN      NaN  \n",
       "8666  979.721610611.png         NaN      NaN      NaN  \n",
       "8667  979.771610612.png         NaN      NaN      NaN  \n",
       "\n",
       "[8668 rows x 17 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71a1582b",
   "metadata": {},
   "source": [
    "# Training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d13237eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# check if CUDA is available\n",
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "\n",
    "# Train your model\n",
    "model = Model().to(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "412d11b7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of parameters in the model: 4849399\n"
     ]
    }
   ],
   "source": [
    "# Count the number of parameters\n",
    "num_params = sum(p.numel() for p in model.parameters())\n",
    "\n",
    "print(\"Number of parameters in the model:\", num_params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "66cb6540",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error\n",
      "\ttraining         \t (min:    0.229, max:    0.234, cur:    0.229)\n",
      "\tvalidation       \t (min:    0.164, max:    0.281, cur:    0.214)\n",
      "Epoch 2 loss: 0.04573262482881546\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2c807fa0c9fb42ff9d2da708488ba7f6",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "train :   0%|          | 0/611 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Define your loss function and optimizer\n",
    "from livelossplot import PlotLosses\n",
    "\n",
    "criterion = nn.MSELoss()\n",
    "optimizer = torch.optim.Adam(model.parameters(), lr=0.1)\n",
    "PATH = \"model.pth\"\n",
    "\n",
    "liveloss = PlotLosses()\n",
    "counter = 0\n",
    "\n",
    "for epoch in tqdm(range(50),desc = 'Epochs : '):\n",
    "    logs = {}\n",
    "\n",
    "    for phase in ['train','val']:\n",
    "\n",
    "        running_loss = 0.0\n",
    "        for inputs,targets in tqdm(dataloader[phase],desc = phase + ' : '):\n",
    "\n",
    "            inputs_img = inputs[0].permute(0,3,1,2).to(device)\n",
    "            inputs_speed = inputs[1].unsqueeze(1).to(device).to(torch.float32)\n",
    "            inputs_command = inputs[2].to(device).to(torch.float32)\n",
    "            labels = torch.cat([i.unsqueeze(1) for i in targets],axis = 1).to(device).to(torch.float32)\n",
    "\n",
    "            outputs = model(inputs_img,inputs_speed,inputs_command)\n",
    "\n",
    "            if phase == 'train':\n",
    "                optimizer.zero_grad()\n",
    "                loss = criterion(outputs, labels)\n",
    "                loss.backward()\n",
    "                optimizer.step()\n",
    "\n",
    "            running_loss += loss.item() * inputs_img.size(0)\n",
    "            epoch_loss = running_loss / len(dataloader[phase].dataset)\n",
    "\n",
    "            prefix = ''\n",
    "            if phase == 'val':\n",
    "                prefix = 'val_'\n",
    "\n",
    "            logs[prefix + 'mse'] = np.sqrt(epoch_loss)\n",
    "\n",
    "            # Save the model\n",
    "            torch.save(model.state_dict(), PATH)\n",
    "\n",
    "    liveloss.update(logs)\n",
    "    liveloss.draw()\n",
    "\n",
    "\n",
    "    print(\"Epoch {} loss: {}\".format(epoch, epoch_loss))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e82637e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create an instance of your custom dataset\n",
    "train_dataset = CustomDataset(mode = 'train',over_sampling = False)\n",
    "val_dataset = CustomDataset(mode = 'val',over_sampling = False)\n",
    "\n",
    "dataloader = {'train' : DataLoader(train_dataset, batch_size=batch_size, shuffle=False),\n",
    "              'val' : DataLoader(val_dataset, batch_size=batch_size, shuffle=False)}\n",
    "\n",
    "in_data1 = []\n",
    "in_data2 = []\n",
    "out_data = []\n",
    "for idx,(inputs,outputs) in enumerate(dataloader['val']):\n",
    "    in_data1.append(inputs[0])\n",
    "    in_data2.append(inputs[1])\n",
    "    out_data.append(torch.cat([i.unsqueeze(1) for i in outputs],axis = 1))\n",
    "    \n",
    "in_data1 = torch.cat(in_data1,axis = 0).to(device).permute(0,3,1,2)\n",
    "in_data2 = torch.cat(in_data2,axis = 0).to(device).unsqueeze(1).to(torch.float32)\n",
    "out_data = torch.cat(out_data,axis = 0).to(device)\n",
    "\n",
    "in_data1.shape,in_data2.shape,out_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "efa0693a",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_data = model(in_data1,in_data2,inputs_command)\n",
    "\n",
    "out_data = out_data.detach().cpu().numpy()\n",
    "pred_data = pred_data.detach().cpu().numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "605814aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "def exponential_smoothing(arr, alpha = 0.2):\n",
    "    smoothed = np.zeros_like(arr)\n",
    "    smoothed[0] = arr[0]  # The first value remains the same\n",
    "\n",
    "    for i in range(1, len(arr)):\n",
    "        smoothed[i] = alpha * arr[i] + (1 - alpha) * smoothed[i - 1]\n",
    "\n",
    "    return smoothed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e35fbae5",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "plt.figure(figsize = (8,5))\n",
    "plt.plot(pred_data[:,0])\n",
    "plt.plot(out_data[:,0])\n",
    "plt.plot(exponential_smoothing(pred_data[:,0]))\n",
    "plt.legend([\"pred\",\"Actual\",\"smoothed\"])\n",
    "plt.title(\"Steer\")\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize = (8,5))\n",
    "plt.plot(pred_data[:,1])\n",
    "plt.plot(out_data[:,1])\n",
    "plt.plot(exponential_smoothing(pred_data[:,1]))\n",
    "plt.legend([\"pred\",\"Actual\",\"smoothed\"])\n",
    "plt.title(\"Acc Pedal\")\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize = (8,5))\n",
    "plt.plot(pred_data[:,2])\n",
    "plt.plot(out_data[:,2])\n",
    "plt.plot(exponential_smoothing(pred_data[:,2]))\n",
    "plt.legend([\"pred\",\"Actual\",\"smoothed\"])\n",
    "plt.title(\"Brake\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8e64f5d8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
